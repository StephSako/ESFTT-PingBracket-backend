{"version":3,"sources":["./src/app/Service/bracket.service.ts","./src/app/FormulaireModule/formulaire/formulaire.component.html","./src/app/FormulaireModule/formulaire/formulaire.component.ts","./src/app/FormulaireModule/confirm-formulaire/confirm-formulaire.component.ts","./src/app/FormulaireModule/confirm-formulaire/confirm-formulaire.component.html","./src/app/FormulaireModule/formulaire-routing.module.ts","./src/app/FormulaireModule/formulaire.modules.ts","./src/app/SharedModule/no-sanitize.pipe.ts","./src/app/auth-guard.service.ts","./src/app/Service/account.service.ts","./src/environments/environment.ts","./src/app/Service/buffet.service.ts","./src/app/Service/joueur.service.ts","./src/app/Service/tableau.service.ts","./src/app/SharedModule/shared.modules.ts","./src/app/Service/binome.service.ts","./src/app/Service/logs.service.ts","./src/app/Service/poules.service.ts","./src/app/Service/parametres.service.ts","./src/app/Service/notify.service.ts","./src/app/unauth-guard.service.ts","./src/app/SharedModule/dialog/dialog.component.ts","./src/app/SharedModule/dialog/dialog.component.html","./src/app/app-routing.module.ts","./src/app/app.component.html","./src/app/app.component.ts","./src/app/TournamentModule/list-players/list-players.component.html","./src/app/TournamentModule/list-players/list-players.component.ts","./src/app/Service/handicap.service.ts","./src/app/TournamentModule/match/match.component.html","./src/app/TournamentModule/match/match.component.ts","./src/app/TournamentModule/bracket/bracket.component.html","./src/app/TournamentModule/bracket/bracket.component.ts","./src/app/TournamentModule/binome/binome.component.html","./src/app/TournamentModule/binome/binome.component.ts","./src/app/TournamentModule/poule/handicap/handicap.component.html","./src/app/TournamentModule/poule/handicap/handicap.component.ts","./src/app/TournamentModule/poule/poule.component.html","./src/app/TournamentModule/poule/poule.component.ts","./src/app/TournamentModule/tableau/tableau.component.html","./src/app/TournamentModule/tableau/tableau.component.ts","./src/app/TournamentModule/tournament-routing.module.ts","./src/app/TournamentModule/tournament.modules.ts","./src/app/error-page/error-page.component.ts","./src/app/error-page/error-page.component.html","./src/app/wildcard.modules.ts","./src/app/Service/auth-interceptor.interceptor.ts","./src/app/core.modules.ts","./src/app/app.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":["BracketService","http","baseURL","endpointNodeApi","tableau","phase","this","get","actualRound","actualIdMatch","winnerId","looserId","put","bracket","format","poules","maxNumberPlayers","idTableau","delete","tableauService","parametreService","joueurService","buffetService","router","snackBar","logsService","notifyService","pouleService","titleService","datepipe","dialog","spinnerShown","parametres","texte_debut","_id","date","titre","texte_buffet","texte_fin","consignes_tableaux","open","selectable","removable","addOnBlur","separatorKeysCodes","buffet","ado_adulte","enfant","plats","platsAlreadyCooked","joueurData","tableaux","classement","nom","age","pointage","listeJoueurs","dataSource","getParametres","setTitle","getAllTableaux","subscribe","filter","t","is_launched","err","notifyUser","error","getTableaux","getPlatsAlreadyCooked","event","input","value","trim","push","plat","index","indexOf","splice","$item","data","errOf","tabOf","register","length","forEach","joueur","create","tableauxSubscribed","Set","map","reduce","acc","val","concat","tabSub","generatePoules","summary","getSubmitSummary","addLogs","obs","toPromise","then","catch","join","navigate","state","transform","Date","toUpperCase","isPlayerSubscribing","joueurAge","age_minimum","console","log","playerToDelete","id","action","text","action_button_text","h1_class","close_button","width","afterClosed","res","submit","ConfirmFormulaireComponent","getCurrentNavigation","extras","hasOwnProperty","navigateByUrl","routes","path","component","pathMatch","FormulaireRoutingModule","forChild","FormulaireModules","NoSanitizePipe","domSanitizer","html","bypassSecurityTrustHtml","AuthGuardService","accountService","route","isLoggedIn","logout","AccountService","token","localStorage","setItem","launchAutoLogout","user","post","pipe","saveToken","username","getUserDetails","actualPassword","newPassword","getItem","getToken","payload","split","atob","JSON","parse","exp","now","removeItem","setTimeout","environment","production","anonymousHeader","BuffetService","JoueurService","id_joueur","previousTableauId","newTableauId","TableauService","tableauxSource","tableauxEditSource","tableauxChange","nbInscritsChange","id_tableau","tableau_id","SharedModules","BinomeService","oldIdBinome","newIdBinome","newPlayersList","idJoueur","idBinome","idPlayer","LogsService","PoulesService","id_poule","poule","locked","ParametresService","NotifyService","message","style","duration","panelClass","UnauthGuardService","url","DialogComponent","redirectTo","loadChildren","m","AuthModules","GestionModules","AppRoutingModule","forRoot","preloadingStrategy","useHash","AppComponent","tableauxSubscription","tableauxEditionSubscription","tab","unsubscribe","poulesService","binomeService","consolante","nbPoules","handicap","listJoueurs","listTableauHostable","otherPlayers","joueurControl","showAutocomplete","showChapeauColors","getAllBinomes","getSubscribedUnassignedPlayers","sort","paramMap","getTableau","pop","hostableTableau","optionsListJoueurs","valueChanges","startWith","_filter","filterValue","toLowerCase","includes","getTableauPlayers","joueurs","getAllPlayers","getUnsubscribedPlayers","displayedColumns","getTableauxHostable","tableauEnabledToHostPlayers","listTableaux","getUnsubscribedPlayer","emit","joueur_id","unsubscribeAllPlayers","removeAllBinomes","option","unsubscribePlayer","playersToDelete","id_hostable_tableau","moveAllPlayers","generateHostablePoules","removeAll","sortState","active","direction","i","showChapeau","HandicapService","joueur1","joueur2","isLoisir1","isLoisir2","inverser","Math","abs","ecart","reverse","handicapItem","String","tournoiService","handicapService","updateBracket","disabledMatChip","match","winner","edit","round","entity","formatGetName","name_s","substring","calculHandicap","every","j","params","getBracket","generateBracket","matches","gestionService","binomes","subscribedUnassignedPlayers","element","document","getElementById","window","scrollY","classList","remove","add","id_binome","previousContainer","container","previousIndex","currentIndex","editBinome","item","removePlayer","binome","a","b","HandicapComponent","dialogRef","matchesPoules","regex","RegExp","stringify","close","getAllPoules","editPoule","setStatus","objectRef","participant_s","participant","stateToChange","response","next","changeLaunchState","validateAllPoules","getAll","getSubscribedUnassignedDouble","canActivate","TournamentRoutingModule","TournamentModules","ErrorPageComponent","WildcardModules","authService","request","clone","setHeaders","Authorization","handle","catchError","status","CoreModules","provide","useClass","multi","AppModule","webpackEmptyAsyncContext","req","Promise","resolve","e","Error","code","keys","module","exports"],"mappings":"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","file":"main.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BracketService {\n  private baseURL = environment.endpointNodeApi + 'bracket/';\n\n  constructor(private http: HttpClient) {}\n\n  public getBracket(tableau: string, phase: string): Observable<any> {\n    return this.http.get(`${this.baseURL}${tableau}/${phase}`);\n  }\n\n  public edit(\n    tableau: string,\n    actualRound: number,\n    actualIdMatch: number,\n    winnerId: string,\n    looserId: string,\n    phase: string\n  ): Observable<any> {\n    return this.http.put(\n      `${this.baseURL}edit/${tableau}/${phase}/${actualRound}/${actualIdMatch}`,\n      { winnerId, looserId }\n    );\n  }\n\n  public generateBracket(\n    bracket: string,\n    format: string,\n    phase: string,\n    poules: boolean,\n    maxNumberPlayers: number\n  ): Observable<any> {\n    return this.http.put(`${this.baseURL}generate/${bracket}/${phase}`, {\n      format,\n      poules,\n      maxNumberPlayers,\n    });\n  }\n\n  public deleteBracket(idTableau: string): Observable<any> {\n    return this.http.delete(`${this.baseURL}delete/${idTableau}`);\n  }\n}\n","<div class=\"container\">\r\n  <mat-card *ngIf=\"parametres.open !== null && !parametres.open\">\r\n    <h1 class=\"lobster center\">Les inscriptions au tournoi sont fermées ...</h1>\r\n  </mat-card >\r\n\r\n  <mat-card *ngIf=\"parametres.open !== null && parametres.open\">\r\n    <p [innerHTML]=\"parametres.titre\" class=\"center\"></p>\r\n    <h2 class=\"center lobster\">{{parametres.date | date:\"dd/MM/yyyy\"}}</h2>\r\n\r\n    <p [innerHTML]=\"parametres.texte_debut | noSanitize\"></p>\r\n\r\n    <br>\r\n    <h2 class=\"lobster\">1. Inscription aux tableaux</h2>\r\n    <div [innerHTML]=\"parametres.consignes_tableaux | noSanitize\"></div>\r\n\r\n    <div *ngFor=\"let joueurItem of listeJoueurs\">\r\n      <form>\r\n        <div fxLayout=\"row\" fxLayout.lt-md=\"column\" class=\"form_inputs_player\">\r\n          <div fxFlex=\"25%\" fxFlex.lt-md=\"100%\">\r\n            <mat-form-field appearance=\"outline\" class=\"center\">\r\n              <mat-label>NOM Prénom *</mat-label>\r\n              <input name=\"nom\" [(ngModel)]=\"joueurItem.nom\" matInput>\r\n            </mat-form-field>\r\n          </div>\r\n\r\n          <div fxFlex=\"15%\" fxFlex.lt-md=\"100%\">\r\n            <mat-form-field appearance=\"outline\" class=\"center\">\r\n              <mat-label>Classement mensuel</mat-label>\r\n              <input name=\"classement\" [(ngModel)]=\"joueurItem.classement\" type=\"number\" min=\"0\" max=\"2000\" matInput>\r\n            </mat-form-field>\r\n          </div>\r\n\r\n          <div fxFlex=\"15%\" fxFlex.lt-md=\"100%\">\r\n            <mat-form-field appearance=\"outline\" class=\"center\">\r\n              <mat-label>Âge</mat-label>\r\n              <input (input)=\"typing(joueurItem)\" name=\"age\" [(ngModel)]=\"joueurItem.age\" type=\"number\" min=\"5\" max=\"99\" matInput>\r\n            </mat-form-field>\r\n          </div>\r\n\r\n          <div fxFlex=\"30%\" fxFlex.lt-md=\"100%\">\r\n            <mat-form-field appearance=\"outline\" class=\"center\">\r\n              <mat-label>Tableaux *</mat-label>\r\n              <mat-select name=\"tableaux\" [(ngModel)]=\"joueurItem.tableaux\" multiple>\r\n                <mat-option [disabled]=\"clickable(tableau, joueurItem.age)\" *ngFor=\"let tableau of tableaux\" [value]=\"tableau\"><span>{{tableau.nom | titlecase}} <span *ngIf=\"tableau.age_minimum !== null\">-{{ tableau.age_minimum}} ans</span></span></mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div>\r\n\r\n          <div fxFlex=\"15%\" fxFlex.lt-md=\"100%\">\r\n            <button mat-raised-button (click)=\"removeItem(joueurItem)\" class=\"center btn_action delete\" color=\"warn\">Effacer ce joueur</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n\r\n    <form>\r\n      <div fxLayout=\"row\" fxLayout.lt-md=\"column\" class=\"form_inputs_player\">\r\n        <div fxFlex=\"25%\" fxFlex.lt-md=\"100%\">\r\n          <mat-form-field appearance=\"outline\" class=\"center\">\r\n            <mat-label>NOM Prénom *</mat-label>\r\n            <input name=\"nom\" [(ngModel)]=\"joueurData.nom\" matInput>\r\n          </mat-form-field>\r\n        </div>\r\n\r\n        <div fxFlex=\"15%\" fxFlex.lt-md=\"100%\">\r\n          <mat-form-field appearance=\"outline\" class=\"center\">\r\n            <mat-label>Classement</mat-label>\r\n            <input name=\"classement\" [(ngModel)]=\"joueurData.classement\" type=\"number\" min=\"0\" max=\"2000\" matInput>\r\n          </mat-form-field>\r\n        </div>\r\n\r\n        <div fxFlex=\"15%\" fxFlex.lt-md=\"100%\">\r\n          <mat-form-field appearance=\"outline\" class=\"center\">\r\n            <mat-label>Âge</mat-label>\r\n            <input (input)=\"typing(joueurData)\" name=\"age\" [(ngModel)]=\"joueurData.age\" type=\"number\" min=\"0\" max=\"99\" matInput>\r\n          </mat-form-field>\r\n        </div>\r\n\r\n        <div fxFlex=\"30%\" fxFlex.lt-md=\"100%\">\r\n          <mat-form-field appearance=\"outline\" class=\"center\">\r\n            <mat-label>Tableaux *</mat-label>\r\n            <mat-select name=\"tableaux\" [(ngModel)]=\"joueurData.tableaux\" multiple>\r\n              <mat-option [disabled]=\"clickable(tableau, joueurData.age)\" *ngFor=\"let tableau of tableaux\" [value]=\"tableau\"><span>{{tableau.nom | titlecase}} <span *ngIf=\"tableau.age_minimum !== null\">-{{ tableau.age_minimum}} ans</span></span></mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n        </div>\r\n\r\n        <div fxFlex=\"15%\" fxFlex.lt-md=\"100%\">\r\n          <button class=\"center btn_action\" [disabled]=\"disabledAddPlayer(joueurData)\" (click)=\"addJoueur(joueurData)\" mat-raised-button color=\"primary\">Valider ce joueur</button>\r\n        </div>\r\n      </div>\r\n\r\n    </form><br>\r\n\r\n    <br>\r\n    <h2 class=\"lobster\">2. Participation au buffet du soir</h2>\r\n    <p [innerHTML]=\"parametres.texte_buffet | noSanitize\"></p>\r\n\r\n    <div class=\"nbParticipants\">\r\n      <h3 class=\"lobster\">Nombre d'enfants au total</h3>\r\n      <mat-form-field class=\"shorten\" appearance=\"outline\">\r\n        <input matInput type=\"number\" min=\"0\" max=\"20\" [(ngModel)]=\"buffet.enfant\" name=\"enfant\">\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div class=\"nbParticipants\">\r\n      <h3 class=\"lobster\">Nombre d'ados/adultes au total</h3>\r\n      <mat-form-field class=\"shorten\" appearance=\"outline\">\r\n        <input matInput type=\"number\" min=\"0\" max=\"20\" [(ngModel)]=\"buffet.ado_adulte\" name=\"ado_adulte\">\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div *ngIf=\"listeJoueurs.length\">\r\n      <br>\r\n      <h3 class=\"lobster\">Participation des joueurs au buffet</h3>\r\n\r\n      <table mat-table [dataSource]=\"dataSource\">\r\n        <ng-container matColumnDef=\"nom\">\r\n          <th mat-header-cell *matHeaderCellDef>Nom</th>\r\n          <td mat-cell *matCellDef=\"let joueur\"> {{joueur.nom}} </td>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"buffet\">\r\n          <th mat-header-cell *matHeaderCellDef>Buffet</th>\r\n          <td mat-cell *matCellDef=\"let joueur\">\r\n            <mat-slide-toggle\r\n              color=\"primary\"\r\n              (change)=\"joueur.buffet = !joueur.buffet\"\r\n              [checked]=\"joueur.buffet\">\r\n            </mat-slide-toggle>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <tr mat-header-row *matHeaderRowDef=\"['nom', 'buffet']\"></tr>\r\n        <tr mat-row *matRowDef=\"let row; columns: ['nom', 'buffet'];\"></tr>\r\n      </table>\r\n    </div>\r\n\r\n    <br>\r\n    <h3 class=\"lobster\">Plat(s) confectionné(s)</h3>\r\n\r\n    <p class=\"alerte_info\">\r\n      <mat-icon aria-hidden=\"false\">info</mat-icon>\r\n      <i> Écriver un plat, puis appuyez sur la touche <strong>Entrée</strong> de votre clavier pour l'ajouter à la liste, et ainsi de suite pour chaque plat.</i>\r\n    </p>\r\n\r\n    <mat-form-field class=\"chip-list\" appearance=\"outline\">\r\n      <mat-chip-list #chipList aria-label=\"Fruit selection\">\r\n        <mat-chip *ngFor=\"let plat of buffet.plats\" [selectable]=\"selectable\" [removable]=\"removable\" (removed)=\"remove(plat)\" color=\"primary\" selected>\r\n          {{plat}}\r\n          <mat-icon matChipRemove *ngIf=\"removable\">cancel</mat-icon>\r\n        </mat-chip>\r\n        <input [matChipInputFor]=\"chipList\"\r\n              [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n              [matChipInputAddOnBlur]=\"addOnBlur\"\r\n              type=\"text\"\r\n              placeholder=\"Plats préparés\"\r\n              (matChipInputTokenEnd)=\"add($event)\">\r\n      </mat-chip-list>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <p><i>Plats déjà préparés :</i></p>\r\n    <mat-chip-list *ngIf=\"!platsAlreadyCookedEmpty(); else noPlatsAlreadyCooked\">\r\n      <mat-chip *ngFor=\"let plat of platsAlreadyCooked\" color=\"primary\" selected>{{ plat }}</mat-chip>\r\n    </mat-chip-list>\r\n    <ng-template #noPlatsAlreadyCooked><p>(Aucun)</p></ng-template><br>\r\n\r\n    <br>\r\n    <h2 class=\"lobster\">3. Validez le formulaire !</h2>\r\n\r\n    <p class=\"alerte_pill center\" *ngIf=\"isPlayerSubscribing()\">Un joueur est en cours d'inscription et n'a pas été validé.<br><i>(Rappel : cliquez sur le bouton bleu <b>Valider le joueur</b> pour inscrire chaque participant.)</i></p>\r\n    <button [disabled]=\"disabledSubmit()\" class=\"center\" mat-raised-button color=\"primary\" (click)=\"openConfirmModale()\">\r\n      <mat-icon *ngIf=\"spinnerShown\">\r\n        <mat-spinner color=\"accent\" [diameter]=\"20\"></mat-spinner>\r\n      </mat-icon>\r\n      Envoyer !\r\n    </button>\r\n    <br>\r\n    <br>\r\n\r\n    <div [innerHTML]=\"parametres.texte_fin | noSanitize\"></div><br>\r\n\r\n  </mat-card>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { TableauInterface } from '../../Interface/Tableau';\r\nimport { TableauService } from '../../Service/tableau.service';\r\nimport { ParametresService } from '../../Service/parametres.service';\r\nimport { ParametreInterface } from '../../Interface/Parametre';\r\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\r\nimport { MatChipInputEvent } from '@angular/material/chips';\r\nimport { BuffetInterface } from '../../Interface/Buffet';\r\nimport { JoueurInterface } from '../../Interface/Joueur';\r\nimport { JoueurService } from '../../Service/joueur.service';\r\nimport { BuffetService } from '../../Service/buffet.service';\r\nimport { Router } from '@angular/router';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { NotifyService } from '../../Service/notify.service';\r\nimport { PoulesService } from '../../Service/poules.service';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { LogsService } from 'src/app/Service/logs.service';\r\nimport { DatePipe } from '@angular/common';\r\nimport { Dialog } from 'src/app/Interface/Dialog';\r\nimport { DialogComponent } from 'src/app/SharedModule/dialog/dialog.component';\r\nimport { MatDialog } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-formulaire',\r\n  templateUrl: './formulaire.component.html',\r\n  styleUrls: ['./formulaire.component.scss'],\r\n})\r\nexport class FormulaireComponent implements OnInit {\r\n  /* Champs du formulaire pour les joueurs */\r\n  public tableaux: TableauInterface[];\r\n  public spinnerShown = false;\r\n\r\n  public parametres: ParametreInterface = {\r\n    texte_debut: null,\r\n    _id: null,\r\n    date: null,\r\n    titre: null,\r\n    texte_buffet: null,\r\n    texte_fin: null,\r\n    consignes_tableaux: null,\r\n    open: null,\r\n  };\r\n\r\n  /* Paramètres de l'input avec les Chips */\r\n  selectable = true;\r\n  removable = true;\r\n  addOnBlur = true;\r\n  readonly separatorKeysCodes: number[] = [ENTER, COMMA];\r\n\r\n  public buffet: BuffetInterface = {\r\n    ado_adulte: 0,\r\n    enfant: 0,\r\n    _id: null,\r\n    plats: [],\r\n  };\r\n  public platsAlreadyCooked: string[] = [];\r\n\r\n  /* Dupliquer le formulaire pour un nouveau joueur */\r\n  public joueurData: JoueurInterface = {\r\n    tableaux: [],\r\n    classement: null,\r\n    nom: null,\r\n    buffet: true,\r\n    age: null,\r\n    _id: null,\r\n    pointage: false,\r\n  };\r\n  public listeJoueurs: JoueurInterface[] = [];\r\n  public dataSource = new MatTableDataSource<JoueurInterface>([]);\r\n\r\n  constructor(\r\n    private tableauService: TableauService,\r\n    private parametreService: ParametresService,\r\n    private joueurService: JoueurService,\r\n    private buffetService: BuffetService,\r\n    private router: Router,\r\n    private snackBar: MatSnackBar,\r\n    private logsService: LogsService,\r\n    private notifyService: NotifyService,\r\n    private pouleService: PoulesService,\r\n    private titleService: Title,\r\n    private datepipe: DatePipe,\r\n    public dialog: MatDialog\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.getParametres();\r\n    this.titleService.setTitle('Tournoi ESFTT - Formulaire');\r\n  }\r\n\r\n  getTableaux(): void {\r\n    this.tableauService.getAllTableaux().subscribe(\r\n      (tableaux) =>\r\n        (this.tableaux = tableaux.filter((t) => t.is_launched === 0)),\r\n      (err) => {\r\n        this.notifyService.notifyUser(err.error, this.snackBar, 'error', 'OK');\r\n      }\r\n    );\r\n  }\r\n\r\n  getParametres(): void {\r\n    this.parametreService.getParametres().subscribe(\r\n      (parametres) => {\r\n        this.parametres = parametres;\r\n        if (this.parametres.open) {\r\n          this.getTableaux();\r\n          this.getPlatsAlreadyCooked();\r\n        }\r\n      },\r\n      (err) => {\r\n        this.notifyService.notifyUser(err.error, this.snackBar, 'error', 'OK');\r\n      }\r\n    );\r\n  }\r\n\r\n  getPlatsAlreadyCooked(): void {\r\n    this.buffetService.platsAlreadyCooked().subscribe(\r\n      (plats) => (this.platsAlreadyCooked = plats),\r\n      (err) => {\r\n        this.notifyService.notifyUser(err.error, this.snackBar, 'error', 'OK');\r\n      }\r\n    );\r\n  }\r\n\r\n  add(event: MatChipInputEvent): void {\r\n    const input = event.input;\r\n    const value = event.value;\r\n    if ((value || '').trim()) {\r\n      this.buffet.plats.push(value.trim());\r\n    }\r\n    if (input) {\r\n      input.value = '';\r\n    }\r\n  }\r\n\r\n  remove(plat: string): void {\r\n    const index = this.buffet.plats.indexOf(plat);\r\n    if (index >= 0) {\r\n      this.buffet.plats.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  addJoueur($item): void {\r\n    this.joueurData = {\r\n      tableaux: [],\r\n      classement: null,\r\n      nom: null,\r\n      buffet: true,\r\n      age: null,\r\n      _id: null,\r\n      pointage: false,\r\n    };\r\n    this.listeJoueurs.push($item);\r\n    this.dataSource.data = this.listeJoueurs;\r\n  }\r\n\r\n  removeItem($item): void {\r\n    this.listeJoueurs.splice(this.listeJoueurs.indexOf($item), 1);\r\n  }\r\n\r\n  async submit(): Promise<void> {\r\n    this.spinnerShown = true;\r\n    const errOf: string[] = [];\r\n    const tabOf: any = [];\r\n\r\n    // Enregistrement des données du buffet\r\n    tabOf.push(this.buffetService.register(this.buffet));\r\n\r\n    if (this.listeJoueurs.length > 0) {\r\n      // Inscription des joueurs\r\n      this.listeJoueurs.forEach((joueur) => {\r\n        tabOf.push(this.joueurService.create(joueur.tableaux, joueur));\r\n      });\r\n\r\n      // Tableaux des joueurs souscris\r\n      const tableauxSubscribed = <TableauInterface[]>[\r\n        ...new Set(\r\n          this.listeJoueurs\r\n            .map((joueur) =>\r\n              joueur.tableaux.filter(\r\n                (tableau) =>\r\n                  tableau.poules &&\r\n                  tableau.format === 'simple' &&\r\n                  tableau.is_launched === 0\r\n              )\r\n            )\r\n            .reduce((acc, val) => acc.concat(val), [])\r\n        ),\r\n      ];\r\n      if (tableauxSubscribed.length > 0) {\r\n        tableauxSubscribed.forEach((tabSub) =>\r\n          tabOf.push(this.pouleService.generatePoules(tabSub))\r\n        );\r\n      }\r\n    }\r\n\r\n    const summary: string = this.getSubmitSummary();\r\n    tabOf.push(this.logsService.addLogs(summary));\r\n\r\n    for (const obs of tabOf) {\r\n      await obs\r\n        .toPromise()\r\n        .then()\r\n        .catch((err) => errOf.push(err.error));\r\n    }\r\n\r\n    this.spinnerShown = false;\r\n    if (errOf.length > 0) {\r\n      this.notifyService.notifyUser(\r\n        errOf.join(' - '),\r\n        this.snackBar,\r\n        'error',\r\n        'OK'\r\n      );\r\n    } else {\r\n      this.router.navigate(['submitted'], {\r\n        state: { summary: this.getSubmitSummary() },\r\n      });\r\n    }\r\n  }\r\n\r\n  getSubmitSummary(): string {\r\n    let summary: string =\r\n      '<p><i>Inscription le ' +\r\n      this.datepipe.transform(new Date(), 'dd/MM/yyyy à HH:mm') +\r\n      '</i><br>';\r\n    summary +=\r\n      '<h3 style=\"margin-bottom: 2px;\"><b><u>Buffet :</u></b></h3><b>Nombre d\\'enfants :</b> ' +\r\n      this.buffet.enfant +\r\n      \"<br><b>Nombre d'ados/adultes :</b> \" +\r\n      this.buffet.ado_adulte +\r\n      '<br><b>Plats préparés :</b> ' +\r\n      (this.buffet.plats.length > 0\r\n        ? this.buffet.plats.join(', ')\r\n        : '<i>Aucun</i>') +\r\n      '<br><br><h3 style=\"margin-bottom: 2px;\"><b><u>Inscription des joueurs :</u></b></h3>';\r\n\r\n    if (this.listeJoueurs.length > 0) {\r\n      this.listeJoueurs.forEach((joueur) => {\r\n        summary +=\r\n          '<b style=\"color: #3f51b5\">' +\r\n          joueur.nom.toUpperCase() +\r\n          '</b><br><b>Classement :</b> ' +\r\n          (joueur.classement || joueur.classement > 0\r\n            ? joueur.classement\r\n            : '/') +\r\n          '<br><b>Âge :</b> ' +\r\n          (joueur.age ? +joueur.age + ' ans' : '/') +\r\n          '<br><b>Tableaux :</b> ' +\r\n          joueur.tableaux\r\n            .map(\r\n              (t) =>\r\n                '<span style=\"text-transform: capitalize\">' + t.nom + '</span>'\r\n            )\r\n            .join(', ') +\r\n          '<br><b>Buffet :</b> ' +\r\n          (joueur.buffet ? 'Oui' : 'Non') +\r\n          '<br><br>';\r\n      });\r\n    } else {\r\n      summary += '<i>Aucun joueur inscrit</i>';\r\n    }\r\n\r\n    return summary + '</p>';\r\n  }\r\n\r\n  disabledAddPlayer(joueurData: JoueurInterface): boolean {\r\n    return !(\r\n      joueurData.nom !== null &&\r\n      joueurData.nom !== '' &&\r\n      joueurData.tableaux.length > 0\r\n    );\r\n  }\r\n\r\n  disabledSubmit(): boolean {\r\n    return (\r\n      (this.listeJoueurs.length === 0 &&\r\n        this.buffet.enfant === 0 &&\r\n        this.buffet.ado_adulte === 0 &&\r\n        this.buffet.plats.length === 0) ||\r\n      this.spinnerShown ||\r\n      this.isPlayerSubscribing()\r\n    );\r\n  }\r\n\r\n  platsAlreadyCookedEmpty(): boolean {\r\n    return this.platsAlreadyCooked\r\n      ? this.platsAlreadyCooked.length === 0\r\n      : false;\r\n  }\r\n\r\n  clickable(tableau: TableauInterface, joueurAge: number): boolean {\r\n    return (\r\n      tableau.age_minimum !== null &&\r\n      (joueurAge === null || joueurAge >= tableau.age_minimum)\r\n    );\r\n  }\r\n\r\n  typing(joueur: JoueurInterface): void {\r\n    joueur.tableaux = joueur.tableaux.filter(\r\n      (tableau) =>\r\n        !(joueur.age <= tableau.age_minimum && tableau.age_minimum !== null)\r\n    );\r\n  }\r\n\r\n  isPlayerSubscribing(): boolean {\r\n    return !(\r\n      this.joueurData.age === null &&\r\n      (this.joueurData.nom === null || this.joueurData.nom === '') &&\r\n      this.joueurData.tableaux.length === 0 &&\r\n      this.joueurData.classement === null\r\n    );\r\n  }\r\n\r\n  openConfirmModale(): void {\r\n    console.log(this.getSubmitSummary());\r\n    const playerToDelete: Dialog = {\r\n      id: 'confirm',\r\n      action: 'Vérifiez les informations',\r\n      text: this.getSubmitSummary(),\r\n      action_button_text: 'Confirmer',\r\n      h1_class: 'form_modale',\r\n      close_button: 'Modifier',\r\n    };\r\n\r\n    this.dialog\r\n      .open(DialogComponent, {\r\n        width: 'auto',\r\n        data: playerToDelete,\r\n      })\r\n      .afterClosed()\r\n      .subscribe(\r\n        (res) => {\r\n          if (res) {\r\n            this.submit().then();\r\n          }\r\n        },\r\n        (err) => {\r\n          this.notifyService.notifyUser(\r\n            err.error,\r\n            this.snackBar,\r\n            'error',\r\n            'OK'\r\n          );\r\n        }\r\n      );\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-confirm-formulaire',\n  templateUrl: './confirm-formulaire.component.html',\n  styleUrls: ['./confirm-formulaire.component.scss'],\n})\nexport class ConfirmFormulaireComponent implements OnInit {\n  public summary = '';\n\n  constructor(private readonly router: Router) {\n    if (\n      this.router.getCurrentNavigation().extras.hasOwnProperty('state') &&\n      this.router.getCurrentNavigation().extras.state.hasOwnProperty('summary')\n    ) {\n      this.summary = this.router.getCurrentNavigation().extras.state.summary;\n    } else {\n      this.router.navigateByUrl('/formulaire');\n    }\n  }\n\n  ngOnInit(): void {}\n}\n","<mat-card>\n  <h1 class=\"lobster center\">Merci pour votre inscription, vos informations ont été enregistrées !</h1>\n\n  <p class=\"summary center\" [innerHTML]=\"summary | noSanitize\"></p>\n\n  <p class=\"center alerte_pill\">Vous pouvez quitter la page.</p>\n</mat-card>\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { FormulaireComponent } from './formulaire/formulaire.component';\r\nimport { ConfirmFormulaireComponent } from './confirm-formulaire/confirm-formulaire.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: FormulaireComponent, pathMatch: 'full' },\r\n  { path: 'submitted', component: ConfirmFormulaireComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class FormulaireRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CommonModule, DatePipe } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { FormulaireRoutingModule } from './formulaire-routing.module';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { FormulaireComponent } from './formulaire/formulaire.component';\r\nimport { ConfirmFormulaireComponent } from './confirm-formulaire/confirm-formulaire.component';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { SharedModules } from '../SharedModule/shared.modules';\r\n\r\n@NgModule({\r\n  declarations: [FormulaireComponent, ConfirmFormulaireComponent],\r\n  imports: [\r\n    RouterModule,\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormulaireRoutingModule,\r\n    FormsModule,\r\n    MatCardModule,\r\n    MatChipsModule,\r\n    MatProgressSpinnerModule,\r\n    MatInputModule,\r\n    MatIconModule,\r\n    FlexLayoutModule,\r\n    MatSelectModule,\r\n    MatButtonModule,\r\n    MatTableModule,\r\n    MatSlideToggleModule,\r\n    SharedModules,\r\n  ],\r\n  providers: [DatePipe],\r\n})\r\nexport class FormulaireModules {}\r\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\n@Pipe({ name: 'noSanitize' })\nexport class NoSanitizePipe implements PipeTransform {\n  constructor(private domSanitizer: DomSanitizer) {}\n  transform(html: string): SafeHtml {\n    return this.domSanitizer.bypassSecurityTrustHtml(html);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Router,\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n} from '@angular/router';\n\nimport { AccountService } from './Service/account.service';\n\n@Injectable()\nexport class AuthGuardService implements CanActivate {\n  constructor(private accountService: AccountService, private router: Router) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    if (this.accountService.isLoggedIn()) {\n      return true;\n    } else {\n      this.accountService.logout();\n      this.router.navigateByUrl('/login');\n      return false;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n  TokenPayloadLogin,\r\n  TokenResponse,\r\n  UserInterface,\r\n} from '../Interface/Account';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AccountService {\r\n  private baseURL = environment.endpointNodeApi + 'account/';\r\n  private token: string;\r\n\r\n  constructor(private http: HttpClient, private router: Router) {}\r\n\r\n  private saveToken(token: string): void {\r\n    this.token = token;\r\n    localStorage.setItem('userToken', token);\r\n    this.launchAutoLogout();\r\n  }\r\n\r\n  public login(user: TokenPayloadLogin): Observable<any> {\r\n    return this.http.post(this.baseURL + 'login', user).pipe(\r\n      map((data: TokenResponse) => {\r\n        if (data.token) {\r\n          this.saveToken(data.token);\r\n        }\r\n        return data;\r\n      }),\r\n      catchError((err) => throwError(err))\r\n    );\r\n  }\r\n\r\n  public editUsername(username: string): Observable<any> {\r\n    const _id = this.getUserDetails()._id;\r\n    const URL = this.http.put(`${this.baseURL}edit/username`, {\r\n      username,\r\n      _id,\r\n    });\r\n\r\n    return URL.pipe(\r\n      map((data: TokenResponse) => {\r\n        if (data.token) {\r\n          this.saveToken(data.token);\r\n        }\r\n        return data;\r\n      }),\r\n      catchError((err) => throwError(err))\r\n    );\r\n  }\r\n\r\n  public editPassword(\r\n    actualPassword: string,\r\n    newPassword: string\r\n  ): Observable<any> {\r\n    const _id = this.getUserDetails()._id;\r\n    const URL = this.http.put(`${this.baseURL}edit/password`, {\r\n      actualPassword,\r\n      newPassword,\r\n      _id,\r\n    });\r\n\r\n    return URL.pipe(\r\n      map((data: TokenResponse) => {\r\n        if (data.token) {\r\n          this.saveToken(data.token);\r\n        }\r\n        return data;\r\n      }),\r\n      catchError((err) => throwError(err))\r\n    );\r\n  }\r\n\r\n  public getToken(): string {\r\n    if (!this.token) {\r\n      this.token = localStorage.getItem('userToken');\r\n    }\r\n    return this.token;\r\n  }\r\n\r\n  public getUserDetails(): UserInterface {\r\n    const token = this.getToken();\r\n    let payload;\r\n    if (token) {\r\n      payload = token.split('.')[1];\r\n      payload = atob(payload);\r\n      return JSON.parse(payload);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public isLoggedIn(): boolean {\r\n    const user = this.getUserDetails();\r\n    return user ? user.exp * 1000 > Date.now() : false;\r\n  }\r\n\r\n  public logout(): void {\r\n    this.token = '';\r\n    localStorage.removeItem('userToken');\r\n    this.router.navigateByUrl('/login');\r\n  }\r\n\r\n  public launchAutoLogout(): void {\r\n    setTimeout(() => {\r\n      this.logout();\r\n    }, this.getUserDetails().exp * 1000 - Date.now());\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  anonymousHeader: 'ANONYMOUSLY_LOGGED',\n  endpointNodeApi: 'http://localhost:3000/api/',\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { BuffetInterface } from '../Interface/Buffet';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BuffetService {\n  private baseURL = environment.endpointNodeApi + 'buffet/';\n\n  constructor(private http: HttpClient) {}\n\n  public getBuffet(): Observable<any> {\n    return this.http.get(this.baseURL);\n  }\n\n  public platsAlreadyCooked(): Observable<any> {\n    return this.http.get(`${this.baseURL}platsAlreadyCooked`);\n  }\n\n  public register(buffet: BuffetInterface): Observable<any> {\n    return this.http.post(`${this.baseURL}register`, buffet);\n  }\n\n  public edit(buffet: BuffetInterface): Observable<any> {\n    return this.http.post(`${this.baseURL}edit`, buffet);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { JoueurInterface } from '../Interface/Joueur';\nimport { TableauInterface } from '../Interface/Tableau';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JoueurService {\n  private baseURL = environment.endpointNodeApi + 'joueur/';\n\n  constructor(private http: HttpClient) {}\n\n  public getPlayer(id_joueur: string): Observable<any> {\n    return this.http.get(`${this.baseURL}${id_joueur}`);\n  }\n\n  public getAllPlayers(): Observable<any> {\n    return this.http.get(this.baseURL);\n  }\n\n  public getTableauPlayers(tableau: string): Observable<any> {\n    return this.http.get(`${this.baseURL}subscribed/${tableau}`);\n  }\n\n  public getUnsubscribedPlayer(tableau: string): Observable<any> {\n    return this.http.get(`${this.baseURL}unsubscribed/${tableau}`);\n  }\n\n  public create(\n    tableaux: TableauInterface[],\n    joueur: JoueurInterface\n  ): Observable<any> {\n    return this.http.post(`${this.baseURL}create`, { joueur, tableaux });\n  }\n\n  public edit(joueur: JoueurInterface): Observable<any> {\n    return this.http.put(`${this.baseURL}edit/${joueur._id}`, joueur);\n  }\n\n  public unsubscribe(\n    tableau: TableauInterface,\n    id_joueur: string\n  ): Observable<any> {\n    return this.http.put(\n      `${this.baseURL}unsubscribe/${id_joueur}/${tableau._id}`,\n      { format: tableau.format }\n    );\n  }\n\n  public delete(id_joueur: string): Observable<any> {\n    return this.http.delete(`${this.baseURL}delete/${id_joueur}`);\n  }\n\n  public getSubscribedUnassignedDouble(tableau: string): Observable<any> {\n    return this.http.get(`${this.baseURL}unassigned/${tableau}`);\n  }\n\n  public moveAllPlayers(\n    previousTableauId: string,\n    newTableauId: string\n  ): Observable<any> {\n    return this.http.put(this.baseURL + 'move', {\n      previousTableauId,\n      newTableauId,\n    });\n  }\n\n  public pointerPlayer(joueur: JoueurInterface): Observable<any> {\n    return this.http.put(this.baseURL + `pointer/${joueur._id}`, {\n      pointage: !joueur.pointage,\n    });\n  }\n}\n","import { EventEmitter, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, Subject } from 'rxjs';\nimport { TableauInterface } from '../Interface/Tableau';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TableauService {\n  private baseURL = environment.endpointNodeApi + 'tableau/';\n  tableauxSource = new Subject();\n  tableauxEditSource = new Subject();\n  tableauxChange: EventEmitter<void> = new EventEmitter();\n  nbInscritsChange: EventEmitter<void> = new EventEmitter();\n\n  constructor(private http: HttpClient) {}\n\n  public getAllTableaux(): Observable<any> {\n    return this.http.get(this.baseURL);\n  }\n\n  public tableauEnabledToHostPlayers(\n    tableau: TableauInterface\n  ): Observable<any> {\n    return this.http.get(\n      `${this.baseURL}hostable/${tableau._id}/${tableau.age_minimum}/${tableau.format}/${tableau.poules}`\n    );\n  }\n\n  public getTableau(id_tableau: string): Observable<any> {\n    return this.http.get(`${this.baseURL}${id_tableau}`);\n  }\n\n  public getPlayerCountPerTableau(): Observable<any> {\n    return this.http.get(`${this.baseURL}player_count`);\n  }\n\n  public create(tableau: TableauInterface): Observable<any> {\n    return this.http.post(`${this.baseURL}create`, tableau);\n  }\n\n  public edit(tableau: TableauInterface): Observable<any> {\n    return this.http.put(`${this.baseURL}edit/${tableau._id}`, tableau);\n  }\n\n  public changeLaunchState(tableau: TableauInterface): Observable<any> {\n    return this.http.put(`${this.baseURL}change_launch_state/${tableau._id}`, {\n      is_launched: tableau.is_launched,\n    });\n  }\n\n  public unsubscribeInvalidPlayers(tableau: TableauInterface): Observable<any> {\n    return this.http.put(\n      `${this.baseURL}unsubscribe/invalid/${tableau._id}`,\n      tableau\n    );\n  }\n\n  public reset(): Observable<any> {\n    return this.http.delete(`${this.baseURL}reset`);\n  }\n\n  public delete(tableau: TableauInterface): Observable<any> {\n    return this.http.delete(\n      `${this.baseURL}delete/${tableau._id}/${tableau.format}/${tableau.poules}`\n    );\n  }\n\n  public unsubscribeAllPlayers(tableau_id: string): Observable<any> {\n    return this.http.put(`${this.baseURL}unsubscribe_all`, { tableau_id });\n  }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormJoueurComponent } from './form-joueur/form-joueur.component';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { DialogComponent } from './dialog/dialog.component';\r\nimport { NoSanitizePipe } from './no-sanitize.pipe';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\n\r\n@NgModule({\r\n  declarations: [FormJoueurComponent, DialogComponent, NoSanitizePipe],\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    FlexLayoutModule,\r\n    ReactiveFormsModule,\r\n    MatSelectModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatSlideToggleModule,\r\n  ],\r\n  exports: [FormJoueurComponent, NoSanitizePipe],\r\n})\r\nexport class SharedModules {}\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { JoueurInterface } from '../Interface/Joueur';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BinomeService {\n  private baseURL = environment.endpointNodeApi + 'binome/';\n\n  constructor(private http: HttpClient) {}\n\n  public getAll(tableau: string): Observable<any> {\n    return this.http.get(`${this.baseURL}${tableau}`);\n  }\n\n  public editBinome(\n    oldIdBinome: string,\n    newIdBinome: string,\n    newPlayersList: [id: JoueurInterface],\n    idJoueur: string\n  ): Observable<any> {\n    return this.http.put(`${this.baseURL}edit/${idJoueur}`, {\n      oldIdBinome,\n      newIdBinome,\n      newPlayersList,\n      idJoueur,\n    });\n  }\n\n  public removePlayer(idBinome: string, idPlayer: string): Observable<any> {\n    return this.http.delete(\n      `${this.baseURL}remove_player/${idBinome}/${idPlayer}`\n    );\n  }\n\n  public removeAll(tableau: string): Observable<any> {\n    return this.http.delete(`${this.baseURL}reset/${tableau}`);\n  }\n\n  // Si un tableau devient un format 'double', on créé ses binômes\n  public generateBinomes(tableau: string): Observable<any> {\n    return this.http.put(`${this.baseURL}generate/${tableau}`, null);\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\nimport { LogsInterface } from '../Interface/LogsInterface';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LogsService {\r\n  private baseURL = environment.endpointNodeApi + 'logs/';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  public getAll(): Observable<any> {\r\n    return this.http.get(this.baseURL);\r\n  }\r\n\r\n  public addLogs(log: string): Observable<any> {\r\n    return this.http.put(`${this.baseURL}add`, { log });\r\n  }\r\n\r\n  public emptyLogs(): Observable<any> {\r\n    return this.http.post(`${this.baseURL}empty`, null);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { JoueurInterface } from '../Interface/Joueur';\nimport { PouleInterface } from '../Interface/Poule';\nimport { TableauInterface } from '../Interface/Tableau';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PoulesService {\n  private baseURL = environment.endpointNodeApi + 'poule/';\n\n  constructor(private http: HttpClient) {}\n\n  public getAll(tableau: string, format: string): Observable<any> {\n    return this.http.get(`${this.baseURL}${tableau}/${format}`);\n  }\n\n  public editPoule(\n    id_poule: string,\n    newPlayersList: [id: JoueurInterface]\n  ): Observable<any> {\n    return this.http.put(`${this.baseURL}edit/${id_poule}`, newPlayersList);\n  }\n\n  public setStatus(poule: PouleInterface): Observable<any> {\n    return this.http.put(`${this.baseURL}editStatus/${poule._id}`, {\n      locked: !poule.locked,\n    });\n  }\n\n  public generatePoules(tableau: TableauInterface): Observable<any> {\n    return this.http.put(`${this.baseURL}generate`, tableau);\n  }\n\n  public deletePoules(idTableau: string): Observable<any> {\n    return this.http.delete(`${this.baseURL}delete/${idTableau}`);\n  }\n\n  public validateAllPoules(id_tableau: string): Observable<any> {\n    return this.http.put(\n      `${this.baseURL}validate_all_poules/${id_tableau}`,\n      null\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\nimport { ParametreInterface } from '../Interface/Parametre';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ParametresService {\r\n  private baseURL = environment.endpointNodeApi + 'parametre/';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  public getParametres(): Observable<any> {\r\n    return this.http.get(this.baseURL);\r\n  }\r\n\r\n  public edit(parametres: ParametreInterface): Observable<any> {\r\n    return this.http.put(`${this.baseURL}edit`, { parametres });\r\n  }\r\n\r\n  public reset(): Observable<any> {\r\n    return this.http.delete(this.baseURL);\r\n  }\r\n\r\n  public openCloseFormulaire(open: boolean): Observable<any> {\r\n    return this.http.put(`${this.baseURL}change_form_state`, { open });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotifyService {\n  constructor() {}\n\n  public notifyUser(\n    message: string,\n    snackBar: MatSnackBar,\n    style: string,\n    action?: string\n  ): void {\n    snackBar.open(message, action, {\n      duration: 2000,\n      panelClass: ['style-' + style],\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  Router,\r\n  CanActivate,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot,\r\n} from '@angular/router';\r\n\r\nimport { AccountService } from './Service/account.service';\r\n\r\n@Injectable()\r\nexport class UnauthGuardService implements CanActivate {\r\n  constructor(private accountService: AccountService, private router: Router) {}\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): boolean {\r\n    if (state.url === '/login' && !this.accountService.isLoggedIn()) {\r\n      return true;\r\n    } else {\r\n      this.router.navigateByUrl('/gestion');\r\n      return false;\r\n    }\r\n  }\r\n}\r\n","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Dialog } from '../../Interface/Dialog';\n\n@Component({\n  selector: 'app-dialog',\n  templateUrl: './dialog.component.html',\n  styleUrls: ['./dialog.component.scss'],\n})\nexport class DialogComponent {\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Dialog) {}\n}\n","<h1 mat-dialog-title class=\"center\" [ngClass]=\"data.h1_class\" *ngIf=\"data.action\">\n  {{ data.action }}\n</h1>\n<h2 mat-dialog-content class=\"center\" *ngIf=\"data.option\">\n  {{ data.option }}\n</h2>\n<p mat-dialog-content class=\"center summary\" *ngIf=\"data.text\" [innerHTML]=\"data.text | noSanitize\"></p>\n<div mat-dialog-actions class=\"center\">\n  <button mat-button mat-dialog-close>{{ data.close_button ? data.close_button : 'Annuler' }}</button>\n  <button mat-button color=\"primary\" [mat-dialog-close]=\"data.id\" cdkFocusInitial>{{ data.action_button_text }}</button>\n</div>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule, PreloadAllModules } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', redirectTo: '/gestion', pathMatch: 'full' },\n  {\n    path: 'login',\n    loadChildren: () =>\n      import('./AuthModule/auth.modules').then((m) => m.AuthModules),\n  },\n  {\n    path: 'gestion',\n    loadChildren: () =>\n      import('./GestionModule/gestion.modules').then((m) => m.GestionModules),\n  },\n  {\n    path: 'formulaire',\n    loadChildren: () =>\n      import('./FormulaireModule/formulaire.modules').then(\n        (m) => m.FormulaireModules\n      ),\n  },\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, {\n      preloadingStrategy: PreloadAllModules,\n      useHash: true,\n    }),\n  ],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","<mat-toolbar>\n  <div *ngIf=\"accountService.isLoggedIn()\">\n    <button *ngFor=\"let tableau of tableaux\" mat-raised-button routerLinkActive=\"active\" [routerLink]=\"'/tableau/' + tableau._id\">\n      <span>{{tableau.nom | titlecase}}\n        <span *ngIf=\"tableau.age_minimum !== null\">-{{ tableau.age_minimum}} ans</span></span>\n        <mat-icon class=\"play\" *ngIf=\"tableau.is_launched === 1\">play_arrow</mat-icon>\n        <mat-icon class=\"finished\" *ngIf=\"tableau.is_launched === 2\">check_circle</mat-icon>\n    </button>\n  </div>\n\n  <span class=\"spacer\"></span>\n  <button mat-raised-button *ngIf=\"accountService.isLoggedIn()\" routerLinkActive=\"active\" routerLink=\"/gestion\">Gestion</button>\n  <button mat-raised-button routerLink=\"/formulaire\" routerLinkActive=\"active\">Formulaire</button>\n  <button mat-raised-button *ngIf=\"!accountService.isLoggedIn()\" routerLinkActive=\"active\" routerLink=\"/login\">Espace privé</button>\n  <button mat-raised-button *ngIf=\"accountService.isLoggedIn()\" (click)=\"accountService.logout()\" color=\"warn\">Se déconnecter</button>\n</mat-toolbar>\n<router-outlet></router-outlet>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { TableauInterface } from './Interface/Tableau';\nimport { TableauService } from './Service/tableau.service';\nimport { AccountService } from './Service/account.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { NotifyService } from './Service/notify.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit, OnDestroy {\n  tableaux: TableauInterface[];\n  private tableauxSubscription: Subscription;\n  private tableauxEditionSubscription: Subscription;\n\n  constructor(\n    public accountService: AccountService,\n    private tableauService: TableauService,\n    private snackBar: MatSnackBar,\n    private notifyService: NotifyService\n  ) {}\n\n  ngOnInit(): void {\n    if (this.accountService.isLoggedIn()) {\n      this.getAllTableaux();\n    }\n    this.tableauxSubscription = this.tableauService.tableauxSource.subscribe(\n      (tableaux: TableauInterface[]) => (this.tableaux = tableaux)\n    );\n    this.tableauxEditionSubscription =\n      this.tableauService.tableauxEditSource.subscribe(\n        (tableau: TableauInterface) => {\n          this.tableaux.map((tab) => {\n            if (tab._id === tableau._id) {\n              tab.is_launched = tableau.is_launched;\n            }\n            return tableau;\n          });\n        }\n      );\n  }\n\n  ngOnDestroy(): void {\n    this.tableauxSubscription.unsubscribe();\n    this.tableauxEditionSubscription.unsubscribe();\n  }\n\n  getAllTableaux(): void {\n    this.tableauService.getAllTableaux().subscribe(\n      (tableaux) => (this.tableaux = tableaux),\n      (err) => {\n        this.notifyService.notifyUser(err.error, this.snackBar, 'error', 'OK');\n      }\n    );\n  }\n}\n","<div class=\"container\">\n\n  <mat-card *ngIf=\"tableau.is_launched === 0\">\n    <h2 class=\"lobster center\">Inscrire un joueur</h2>\n\n    <form (submit)=\"subscribe()\">\n      <mat-form-field appearance=\"outline\" class=\"center\">\n        <mat-icon matSuffix>title</mat-icon>\n        <mat-label>Nom du joueur</mat-label>\n        <input type=\"text\" name=\"nom\" [formControl]=\"joueurControl\" [(ngModel)]=\"joueur.nom\" [matAutocomplete]=\"auto\" matInput (ngModelChange)=\"typingAutocomplete($event)\">\n        <mat-autocomplete #auto=\"matAutocomplete\">\n          <mat-option *ngFor=\"let joueur of optionsListJoueurs | async\" [value]=\"joueur.nom\" [ngClass]=\"{'hide-autocomplete': !showAutocomplete}\">\n            {{joueur.nom}} - {{joueur.classement}} points\n          </mat-option>\n        </mat-autocomplete>\n      </mat-form-field>\n\n      <button mat-raised-button class=\"center\" color=\"primary\" [disabled]=\"!isInvalidPlayer()\">Inscrire</button>\n    </form>\n  </mat-card>\n\n  <mat-card>\n    <h2 class=\"lobster center second_h2\">Liste des joueurs ({{listJoueurs.length}} inscrit<span *ngIf=\"listJoueurs.length > 1\">s</span>)</h2>\n\n    <div fxLayout=\"row\">\n      <div [fxFlex]=\"playersMovable() ? '50%' : '100%'\" class=\"vertically_centered\">\n        <button [disabled]=\"tableau.is_launched !== 0\" (click)=\"unsubscribeAll()\" *ngIf=\"listJoueurs.length\" class=\"center unsubscribeAll\" mat-raised-button color=\"warn\">Désinscrire tous les joueurs</button>\n      </div>\n      <div fxFlex=\"50%\" *ngIf=\"playersMovable()\" class=\"vertically_centered\">\n        <div fxLayout=\"column\">\n          <div fxFlex=\"50%\">\n            <button [disabled]=\"hostableTableau === null\" (click)=\"moveAllPlayers()\" class=\"center movePlayers\" mat-raised-button>Basculer tous les joueurs</button>\n          </div>\n          <div fxFlex=\"50%\">\n            <mat-form-field appearance=\"outline\" class=\"center\">\n              <mat-icon matSuffix>format_list_bulleted</mat-icon>\n              <mat-label>Tableaux</mat-label>\n              <mat-select [(ngModel)]=\"hostableTableau\">\n                <mat-option *ngFor=\"let tableau of listTableauHostable\" [value]=\"tableau\">{{ tableau.nom | titlecase }} - {{ tableau.age_minimum }} ans</mat-option>\n              </mat-select>\n            </mat-form-field>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <table mat-table [dataSource]=\"dataSource\" [hidden]=\"!listJoueurs.length\" matSort (matSortChange)=\"showChapeau($event)\">\n\n      <ng-container matColumnDef=\"nom\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Nom</th>\n        <td [class]=\"isChapeauHaut(i)\" mat-cell *matCellDef=\"let joueur; let i = index;\" [ngClass]=\"{'pointage_KO': !joueur.pointage, 'pointage_OK': joueur.pointage}\">{{joueur.nom}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"classement\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>\n          Classement\n        </th>\n        <td [class]=\"isChapeauHaut(i)\" mat-cell *matCellDef=\"let joueur; let i = index;\">{{joueur.classement}}</td>\n      </ng-container>\n\n      <ng-container *ngIf=\"tableau.age_minimum !== null\" matColumnDef=\"age\">\n        <th mat-header-cell *matHeaderCellDef>Âge</th>\n        <td mat-cell *matCellDef=\"let joueur\">{{joueur.age}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"delete\">\n        <th mat-header-cell *matHeaderCellDef></th>\n        <td mat-cell *matCellDef=\"let joueur\">\n          <button [disabled]=\"tableau.is_launched !== 0\"  (click)=\"unsubscribe(joueur)\" mat-raised-button color=\"warn\">Désinscrire</button>\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n    </table>\n  </mat-card>\n</div>\n","import {\n  Component,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { JoueurService } from '../../Service/joueur.service';\nimport { JoueurInterface } from '../../Interface/Joueur';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Dialog } from '../../Interface/Dialog';\nimport { DialogComponent } from '../../SharedModule/dialog/dialog.component';\nimport { PoulesService } from '../../Service/poules.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { TableauInterface } from '../../Interface/Tableau';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { NotifyService } from '../../Service/notify.service';\nimport { TableauService } from '../../Service/tableau.service';\nimport { BinomeService } from '../../Service/binome.service';\nimport { FormControl } from '@angular/forms';\nimport { map, startWith } from 'rxjs/operators';\nimport { Observable, Subscription } from 'rxjs';\nimport { MatSort, Sort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\n\n@Component({\n  selector: 'app-list-players',\n  templateUrl: './list-players.component.html',\n  styleUrls: ['./list-players.component.scss'],\n})\nexport class ListPlayersComponent implements OnInit, OnDestroy {\n  displayedColumns: string[];\n  hostableTableau: TableauInterface;\n  tableau: TableauInterface = {\n    format: null,\n    _id: null,\n    is_launched: null,\n    nom: null,\n    poules: null,\n    consolante: null,\n    maxNumberPlayers: null,\n    age_minimum: null,\n    nbPoules: null,\n    handicap: null,\n  };\n  listJoueurs: JoueurInterface[] = [];\n  listTableauHostable: TableauInterface[] = [];\n  otherPlayers: JoueurInterface[] = [];\n  joueur: JoueurInterface;\n  joueurControl = new FormControl('');\n  optionsListJoueurs: Observable<JoueurInterface[]>;\n  showAutocomplete = false;\n  private tableauxEditionSubscription: Subscription;\n  dataSource = new MatTableDataSource(this.listJoueurs);\n  showChapeauColors = false;\n  @Output() generatePoules: EventEmitter<any> = new EventEmitter();\n  @Output() getAllBinomes: EventEmitter<any> = new EventEmitter();\n  @Output() getSubscribedUnassignedPlayers: EventEmitter<any> =\n    new EventEmitter();\n  @ViewChild(MatSort) sort = new MatSort();\n\n  constructor(\n    private joueurService: JoueurService,\n    public dialog: MatDialog,\n    private poulesService: PoulesService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private snackBar: MatSnackBar,\n    private notifyService: NotifyService,\n    private tableauService: TableauService,\n    private binomeService: BinomeService\n  ) {}\n\n  ngOnInit(): void {\n    this.route.paramMap.subscribe(() => {\n      this.joueur = {\n        nom: null,\n        age: null,\n        buffet: null,\n        classement: null,\n        _id: null,\n        tableaux: null,\n        pointage: null,\n      };\n\n      this.getTableau(this.router.url.split('/').pop());\n      this.hostableTableau = null;\n\n      if (this.otherPlayers) {\n        this.optionsListJoueurs = this.joueurControl.valueChanges.pipe(\n          startWith(''),\n          map((value) => this._filter(value))\n        );\n      }\n\n      this.tableauxEditionSubscription =\n        this.tableauService.tableauxEditSource.subscribe(\n          (tableau: TableauInterface) => {\n            this.tableau = tableau;\n          }\n        );\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.tableauxEditionSubscription.unsubscribe();\n  }\n\n  _filter(value: string): JoueurInterface[] {\n    if (value && this.otherPlayers != null) {\n      const filterValue = value.toLowerCase();\n      return this.otherPlayers.filter(\n        (joueur) =>\n          joueur.nom.toLowerCase().includes(filterValue) &&\n          (this.tableau.age_minimum !== null\n            ? joueur.age !== null && joueur.age < this.tableau.age_minimum\n            : true)\n      );\n    } else {\n      return [];\n    }\n  }\n\n  typingAutocomplete(event): void {\n    this.showAutocomplete = event && event.length > 0;\n  }\n\n  getAllPlayers(): void {\n    this.joueurService.getTableauPlayers(this.tableau._id).subscribe(\n      (joueurs) => {\n        this.listJoueurs = joueurs;\n        this.dataSource = new MatTableDataSource(joueurs);\n        this.dataSource.sort = this.sort;\n      },\n      (err) => {\n        this.notifyService.notifyUser(err.error, this.snackBar, 'error', 'OK');\n      }\n    );\n  }\n\n  getTableau(tableau_id: string): void {\n    this.tableauService.getTableau(tableau_id).subscribe(\n      (tableau) => {\n        this.tableau = tableau;\n        this.getAllPlayers();\n        this.getUnsubscribedPlayers();\n        this.displayedColumns =\n          this.tableau.age_minimum !== null\n            ? ['nom', 'classement', 'age', 'delete']\n            : ['nom', 'classement', 'delete'];\n        if (this.tableau.age_minimum) {\n          this.getTableauxHostable();\n        }\n      },\n      (err) => {\n        this.notifyService.notifyUser(err.error, this.snackBar, 'error', 'OK');\n      }\n    );\n  }\n\n  getTableauxHostable(): void {\n    this.tableauService.tableauEnabledToHostPlayers(this.tableau).subscribe(\n      (listTableaux) => (this.listTableauHostable = listTableaux),\n      (err) => {\n        this.notifyService.notifyUser(err.error, this.snackBar, 'error', 'OK');\n      }\n    );\n  }\n\n  getUnsubscribedPlayers(): void {\n    this.joueurService.getUnsubscribedPlayer(this.tableau._id).subscribe(\n      (joueurs) => (this.otherPlayers = joueurs),\n      (err) => {\n        this.notifyService.notifyUser(err.error, this.snackBar, 'error', 'OK');\n      }\n    );\n  }\n\n  subscribe(): void {\n    this.joueurService.create([this.tableau], this.joueur).subscribe(\n      () => {\n        this.joueur = {\n          classement: null,\n          age: null,\n          nom: null,\n          _id: null,\n          buffet: null,\n          pointage: false,\n          tableaux: null,\n        };\n        if (this.tableau.poules && this.tableau.format === 'simple') {\n          this.generatePoules.emit();\n        }\n        if (this.tableau.format === 'double') {\n          this.getAllBinomes.emit();\n          this.getSubscribedUnassignedPlayers.emit();\n        }\n        this.getAllPlayers();\n        this.getUnsubscribedPlayers();\n      },\n      (err) => {\n        this.notifyService.notifyUser(err.error, this.snackBar, 'error', 'OK');\n      }\n    );\n  }\n\n  unsubscribePlayer(joueur_id: string): void {\n    this.joueurService.unsubscribe(this.tableau, joueur_id).subscribe(\n      () => {\n        if (this.tableau.poules) {\n          this.generatePoules.emit();\n        }\n        if (this.tableau.format === 'double') {\n          this.getAllBinomes.emit();\n          this.getSubscribedUnassignedPlayers.emit();\n        }\n        this.getAllPlayers();\n        this.getUnsubscribedPlayers();\n      },\n      (err) => {\n        this.notifyService.notifyUser(err.error, this.snackBar, 'error', 'OK');\n      }\n    );\n  }\n\n  unsubscribeAllPlayers(): void {\n    this.tableauService.unsubscribeAllPlayers(this.tableau._id).subscribe(\n      () => {\n        if (this.tableau.format === 'double') {\n          this.removeAllBinomes();\n        } else if (this.tableau.poules) {\n          this.generatePoules.emit();\n        }\n        this.getAllPlayers();\n        this.getUnsubscribedPlayers();\n      },\n      (err) => {\n        this.notifyService.notifyUser(err.error, this.snackBar, 'error', 'OK');\n      }\n    );\n  }\n\n  unsubscribe(joueur: JoueurInterface): void {\n    const playerToDelete: Dialog = {\n      id: joueur._id,\n      action:\n        'Désinscrire le joueur du tableau et régénérer les poules du tableau ?',\n      option: null,\n      action_button_text: 'Désinscrire',\n    };\n\n    this.dialog\n      .open(DialogComponent, {\n        width: '45%',\n        data: playerToDelete,\n      })\n      .afterClosed()\n      .subscribe((id_joueur) => {\n        if (id_joueur) {\n          this.unsubscribePlayer(id_joueur);\n        }\n      });\n  }\n\n  isInvalidPlayer(): boolean {\n    return (\n      this.joueur.nom !== null &&\n      this.joueur.nom.trim() !== '' &&\n      this.otherPlayers.filter((joueur) => this.joueur.nom === joueur.nom)\n        .length !== 0\n    );\n  }\n\n  unsubscribeAll(): void {\n    const playersToDelete: Dialog = {\n      id: 'true',\n      action: 'Désinscrire tous les joueurs du tableau ?',\n      option: null,\n      action_button_text: 'Désinscrire',\n    };\n\n    this.dialog\n      .open(DialogComponent, {\n        width: '45%',\n        data: playersToDelete,\n      })\n      .afterClosed()\n      .subscribe((id_tableau) => {\n        if (id_tableau) {\n          this.unsubscribeAllPlayers();\n\n          if (this.tableau.format === 'double') {\n            this.getAllBinomes.emit();\n            this.getSubscribedUnassignedPlayers.emit();\n          }\n        }\n      });\n  }\n\n  moveAllPlayers(): void {\n    const playersToDelete: Dialog = {\n      id: this.hostableTableau._id,\n      action:\n        'Basculer tous les joueurs dans ce tableau et régénérer les poules ?',\n      option: null,\n      action_button_text: 'Basculer',\n    };\n\n    this.dialog\n      .open(DialogComponent, {\n        width: '45%',\n        data: playersToDelete,\n      })\n      .afterClosed()\n      .subscribe((id_hostable_tableau) => {\n        if (id_hostable_tableau) {\n          this.joueurService\n            .moveAllPlayers(this.tableau._id, this.hostableTableau._id)\n            .subscribe(\n              () => {\n                this.getAllPlayers();\n                this.generateHostablePoules();\n                if (this.tableau.poules) {\n                  this.generatePoules.emit();\n                }\n                if (this.tableau.format === 'double') {\n                  this.getAllBinomes.emit();\n                  this.getSubscribedUnassignedPlayers.emit();\n                }\n                this.notifyService.notifyUser(\n                  'Les joueurs ont été basculés',\n                  this.snackBar,\n                  'success',\n                  'OK'\n                );\n              },\n              (err) =>\n                this.notifyService.notifyUser(\n                  err.error,\n                  this.snackBar,\n                  'error',\n                  'OK'\n                )\n            );\n        }\n      });\n  }\n\n  generateHostablePoules(): void {\n    this.poulesService.generatePoules(this.hostableTableau).subscribe(\n      () => {},\n      (err) => {\n        this.notifyService.notifyUser(err.error, this.snackBar, 'error', 'OK');\n      }\n    );\n  }\n\n  playersMovable(): boolean {\n    return (\n      this.tableau.age_minimum !== null &&\n      this.listTableauHostable.length &&\n      this.listJoueurs.length > 0\n    );\n  }\n\n  removeAllBinomes(): void {\n    this.binomeService.removeAll(this.tableau._id).subscribe(\n      () => {\n        if (this.tableau.poules) {\n          this.generatePoules.emit();\n        }\n        if (this.tableau.format === 'double') {\n          this.getAllBinomes.emit();\n          this.getSubscribedUnassignedPlayers.emit();\n        }\n      },\n      (err) => {\n        this.notifyService.notifyUser(err.error, this.snackBar, 'error', 'OK');\n      }\n    );\n  }\n\n  showChapeau(sortState: Sort): void {\n    this.showChapeauColors =\n      sortState.active === 'classement' && sortState.direction === 'desc';\n  }\n\n  isChapeauHaut(i: number): string {\n    if (this.showChapeauColors) {\n      const listJoueursLength =\n        this.listJoueurs.length % 2\n          ? this.listJoueurs.length / 2\n          : this.listJoueurs.length / 2 + 0.5;\n      return i >= listJoueursLength ? 'chapeauBas' : 'chapeauHaut';\n    }\n    return '';\n  }\n}\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class HandicapService {\r\n  constructor() {}\r\n\r\n  /**\r\n   * Calculer les points d'handicap entre deux classements\r\n   */\r\n  calculHandicap(joueur1: number, joueur2: number): any[] {\r\n    const isLoisir1 = joueur1 === 0 && joueur2 !== 0;\r\n    const isLoisir2 = joueur2 === 0 && joueur1 !== 0;\r\n\r\n    if (isLoisir1) {\r\n      joueur1 = 500;\r\n    } else if (isLoisir2) {\r\n      joueur2 = 500;\r\n    }\r\n\r\n    let inverser = false;\r\n    let handicap: any[] = [0, 0];\r\n\r\n    if (joueur1 !== joueur2 || Math.abs(joueur1 - joueur2) < 50) {\r\n      if (joueur1 < joueur2) {\r\n        inverser = true;\r\n      }\r\n\r\n      const ecart = Math.abs(joueur1 - joueur2);\r\n      if (ecart >= 50 && ecart <= 99) {\r\n        handicap = [-1, 0];\r\n      } else if (ecart >= 100 && ecart <= 199) {\r\n        handicap = [-1, 1];\r\n      } else if (ecart >= 200 && ecart <= 299) {\r\n        handicap = [-2, 1];\r\n      } else if (ecart >= 300 && ecart <= 399) {\r\n        handicap = [-2, 2];\r\n      } else if (ecart >= 400 && ecart <= 499) {\r\n        handicap = [-3, 2];\r\n      } else if (ecart >= 500 && ecart <= 599) {\r\n        handicap = [-3, 3];\r\n      } else if (ecart >= 600 && ecart <= 699) {\r\n        handicap = [-4, 3];\r\n      } else if (ecart >= 700 && ecart <= 799) {\r\n        handicap = [-4, 4];\r\n      } else if (ecart >= 800) {\r\n        handicap = [-5, 4];\r\n      }\r\n    }\r\n\r\n    if ((isLoisir1 && !inverser) || (isLoisir2 && inverser)) {\r\n      handicap[0]++;\r\n    } else if ((isLoisir2 && !inverser) || (isLoisir1 && inverser)) {\r\n      handicap[1]++;\r\n    }\r\n\r\n    if (inverser) {\r\n      handicap.reverse();\r\n    }\r\n    return handicap.map((handicapItem) => {\r\n      handicapItem =\r\n        handicapItem > 0 ? '+' + handicapItem : String(handicapItem);\r\n      return handicapItem;\r\n    });\r\n  }\r\n}\r\n","<div class=\"ngtt__match-wrapper\">\n  <ng-container *ngFor=\"let joueur of match.joueurs; let index = index;\">\n    <div fxLayout=\"row\">\n      <div id=\"finale\" *ngIf=\"match.joueurs.length === 2 && !(!match.joueurs[0].winner && !match.joueurs[1].winner) && match.round === 1\">\n        <mat-icon id=\"yellow\" *ngIf=\"match.id === 1 && joueur.winner\" matSuffix>emoji_events</mat-icon>\n        <mat-icon id=\"white\" *ngIf=\"match.id === 1 && !joueur.winner\" matSuffix>looks_two</mat-icon>\n        <mat-icon id=\"bronze\" *ngIf=\"match.id === 2 && joueur.winner\" matSuffix>looks_3</mat-icon>\n        <mat-icon id=\"silver\" *ngIf=\"match.id === 2 && !joueur.winner\" matSuffix>looks_4</mat-icon>\n      </div>\n\n      <div class=\"ngtt__team-wrapper\">\n        <mat-chip-list *ngIf=\"joueur._id\">\n          <mat-chip\n            [disabled]=\"match.joueurs.length === 1 || tableau.is_launched === 2 || disabledMatChip\"\n            (click)=\"setWinner(match, joueur._id._id)\"\n            [color]=\"getColor(match, joueur)\"\n            [class]=\"'ngtt__team-title ' + isClickable(match)\">\n              {{ getName(joueur._id) }}\n            </mat-chip>\n            <span class=\"handicap\" *ngIf=\"tableau.handicap && matchHasTwoPlayers(match.joueurs)\">\n              <b>{{ getHandicap(match.joueurs[0]._id.classement, match.joueurs[1]._id.classement)[index] }}</b>\n            </span>\n        </mat-chip-list>\n      </div>\n    </div>\n  </ng-container>\n</div>\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { BracketService } from '../../Service/bracket.service';\r\nimport { TableauInterface } from '../../Interface/Tableau';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { NotifyService } from '../../Service/notify.service';\r\nimport { HandicapService } from 'src/app/Service/handicap.service';\r\n\r\n@Component({\r\n  selector: 'app-match',\r\n  templateUrl: './match.component.html',\r\n  styleUrls: ['./match.component.scss'],\r\n})\r\nexport class MatchComponent implements OnInit {\r\n  @Input() match: any;\r\n  @Input() phase: string;\r\n  @Output() updateBracket: EventEmitter<any> = new EventEmitter();\r\n  @Input() tableau: TableauInterface = {\r\n    format: null,\r\n    _id: null,\r\n    is_launched: null,\r\n    nom: null,\r\n    poules: null,\r\n    consolante: null,\r\n    maxNumberPlayers: null,\r\n    age_minimum: null,\r\n    nbPoules: null,\r\n    handicap: null,\r\n  };\r\n  public disabledMatChip = false;\r\n\r\n  constructor(\r\n    private tournoiService: BracketService,\r\n    private snackBar: MatSnackBar,\r\n    private notifyService: NotifyService,\r\n    private readonly handicapService: HandicapService\r\n  ) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  setWinner(match: any, winnerId: string): void {\r\n    if (\r\n      match.joueurs.length > 1 &&\r\n      this.tableau.is_launched !== 2 &&\r\n      !match.joueurs[0].winner &&\r\n      ((match.joueurs[1] && !match.joueurs[1].winner) || !match.joueurs[1])\r\n    ) {\r\n      this.disabledMatChip = true;\r\n      const looserId =\r\n        match.joueurs.length === 2 &&\r\n        match.joueurs[0]._id &&\r\n        match.joueurs[1]._id\r\n          ? match.joueurs.filter((joueur) => joueur._id._id !== winnerId)[0]._id\r\n              ._id\r\n          : null;\r\n      this.tournoiService\r\n        .edit(\r\n          this.tableau._id,\r\n          match.round,\r\n          match.id,\r\n          winnerId,\r\n          looserId,\r\n          this.phase\r\n        )\r\n        .subscribe(\r\n          () => {\r\n            this.updateBracket.emit();\r\n            this.disabledMatChip = false;\r\n          },\r\n          (err) => {\r\n            this.notifyService.notifyUser(\r\n              err.error,\r\n              this.snackBar,\r\n              'error',\r\n              'OK'\r\n            );\r\n            this.disabledMatChip = false;\r\n          }\r\n        );\r\n    }\r\n  }\r\n\r\n  isClickable(match: any): string {\r\n    return match.joueurs.length > 1 &&\r\n      !match.joueurs[0].winner &&\r\n      ((match.joueurs[1] && !match.joueurs[1].winner) || !match.joueurs[1])\r\n      ? 'clickable'\r\n      : '';\r\n  }\r\n\r\n  getColor(match: any, joueur: any): string {\r\n    if (\r\n      (match.joueurs.length < 2 && !match.joueurs[0].winner) ||\r\n      (!match.joueurs[0].winner && !match.joueurs[1].winner)\r\n    ) {\r\n      return 'undefined';\r\n    } else {\r\n      return joueur.winner ? 'winner' : 'looser';\r\n    }\r\n  }\r\n\r\n  getName(entity: any): string {\r\n    if (this.tableau.format === 'simple') {\r\n      return this.formatGetName(\r\n        entity.nom + ' - ' + entity.classement + ' points'\r\n      );\r\n    } else if (this.tableau.format === 'double') {\r\n      return this.formatGetName(\r\n        entity.joueurs\r\n          ? entity.joueurs.map((joueur) => joueur.nom).join(' - ')\r\n          : ''\r\n      );\r\n    }\r\n  }\r\n\r\n  formatGetName(name_s: string): string {\r\n    return name_s.length > 30 && this.tableau.format === 'double'\r\n      ? name_s.substring(0, 27) + '...'\r\n      : name_s;\r\n  }\r\n\r\n  getHandicap(joueur1: number, joueur2: number): any[] {\r\n    return this.handicapService.calculHandicap(joueur1, joueur2);\r\n  }\r\n\r\n  matchHasTwoPlayers(joueurs): boolean {\r\n    return (\r\n      joueurs.length === 2 && joueurs.every((j: any) => j.hasOwnProperty('_id'))\r\n    );\r\n  }\r\n}\r\n","<div class=\"container\" *ngIf=\"tableau\">\n  <button [disabled]=\"tableau.is_launched === 2\" (click)=\"generateBracket()\" mat-raised-button class=\"center btnGenerateBracket\" color=\"primary\">\n    <mat-icon *ngIf=\"spinnerShown\">\n      <mat-spinner color=\"warn\" [diameter]=\"20\"></mat-spinner>\n    </mat-icon>\n    Générer le tableau\n  </button>\n\n  <mat-card *ngIf=\"tableau.consolante\">\n    <mat-icon class=\"center\">info</mat-icon>\n    <p><b>Pour les consolantes :</b></p>\n    <ul>\n      <li>- si vous souhaitez un repêchage des perdants du premier tour des phases finales en consolantes, renseignez <b>tous les résultats du premier tour de la phase finale</b>, puis générez le tableau de la consolante;</li>\n      <li>- si vous ne souhaitez pas de repêchage, générez le tableau de la consolante <b>AVANT</b> le tableau des phases finales.</li>\n    </ul>\n  </mat-card>\n</div>\n\n<ng-container *ngIf=\"bracket\">\n  <ngtt-single-elimination-tree *ngIf=\"bracket.rounds.length\" [tournament]=\"bracket\" [matchTemplate]=\"matchTemplate\"></ngtt-single-elimination-tree>\n</ng-container>\n\n<ng-template #matchTemplate let-match>\n  <app-match (updateBracket)=\"getBracket()\" [tableau]=\"tableau\" [phase]=\"phase\" [match]=\"match\"></app-match>\n</ng-template>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Dialog } from '../../Interface/Dialog';\nimport { DialogComponent } from '../../SharedModule/dialog/dialog.component';\nimport { BracketService } from '../../Service/bracket.service';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { NgttTournament } from 'ng-tournament-tree';\nimport { TableauInterface } from '../../Interface/Tableau';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { NotifyService } from '../../Service/notify.service';\n\n@Component({\n  selector: 'app-bracket',\n  templateUrl: './bracket.component.html',\n  styleUrls: ['./bracket.component.scss'],\n})\nexport class BracketComponent implements OnInit {\n  @Input() phase: string;\n  @Input() tableau: TableauInterface = {\n    _id: null,\n    nom: null,\n    poules: null,\n    format: null,\n    consolante: null,\n    maxNumberPlayers: null,\n    age_minimum: null,\n    is_launched: null,\n    nbPoules: null,\n    handicap: null,\n  };\n  spinnerShown: boolean;\n  idTableau: string;\n  public bracket: NgttTournament;\n\n  constructor(\n    private tournoiService: BracketService,\n    private route: ActivatedRoute,\n    private dialog: MatDialog,\n    private snackBar: MatSnackBar,\n    private notifyService: NotifyService\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.subscribe((params: Params) => {\n      this.spinnerShown = false;\n      this.idTableau = params.tableau;\n      this.getBracket();\n    });\n  }\n\n  generateBracket(): void {\n    const accountToDelete: Dialog = {\n      id: 'true',\n      action: 'Régénérer le tableau ?',\n      option: null,\n      action_button_text: 'Régénérer',\n    };\n\n    this.dialog\n      .open(DialogComponent, {\n        width: '45%',\n        data: accountToDelete,\n      })\n      .afterClosed()\n      .subscribe((value) => {\n        if (value) {\n          this.spinnerShown = true;\n          this.tournoiService\n            .generateBracket(\n              this.tableau._id,\n              this.tableau.format,\n              this.phase,\n              this.tableau.poules,\n              this.tableau.maxNumberPlayers\n            )\n            .subscribe(\n              () => this.getBracket(),\n              (err) => {\n                this.spinnerShown = false;\n                this.bracket = null;\n                this.notifyService.notifyUser(\n                  err.error,\n                  this.snackBar,\n                  'error',\n                  'OK'\n                );\n              }\n            );\n        }\n      });\n  }\n\n  getBracket(): void {\n    this.tournoiService.getBracket(this.idTableau, this.phase).subscribe(\n      (matches) => {\n        this.bracket = matches;\n        this.spinnerShown = false;\n      },\n      (err) =>\n        this.notifyService.notifyUser(err.error, this.snackBar, 'error', 'OK')\n    );\n  }\n}\n","<div class=\"container\">\n\n  <mat-card *ngIf=\"!binomes.length && !subscribedUnassignedPlayers.length\">\n    <h2 class=\"center lobster\">Il n'y a pas de joueurs inscrits pour le moment</h2>\n  </mat-card>\n\n  <div (window:scroll)=\"onScrollEvent()\" fxLayout=\"column\" cdkDropListGroup *ngIf=\"binomes.length || subscribedUnassignedPlayers.length\">\n    <div fxLayout=\"row nowrap\" fxFlexFill fxLayoutAlign=\"space-between stretch\">\n\n      <div fxFlex=\"33%\" fxLayoutAlign=\"center stretch\">\n        <div class=\"listBinomes\">\n          <div *ngFor=\"let binome of binomes; let indexList = index; let isEven = even;\">\n            <mat-card [class]=\"'mat-elevation-z8 ' + (binome.locked ? 'locked' : '')\" *ngIf=\"isEven\">\n              <h3 class=\"lobster center\">Binôme n°{{indexList+1}}</h3>\n\n              <div cdkDropList [cdkDropListData]=\"binomes[indexList].joueurs\" cdkDropListSortingDisabled class=\"list\" (cdkDropListDropped)=\"editBinome($event, binome._id)\">\n                <div [cdkDragData]=\"[joueur._id, binome._id]\" [cdkDragDisabled]=\"binome.locked || tableau.is_launched !== 0\" class=\"box center\" *ngFor=\"let joueur of binomes[indexList].joueurs\" cdkDrag (dblclick)=\"unsubscribeDblClick(binome._id, joueur._id)\">\n                  <div class=\"custom-placeholder\" *cdkDragPlaceholder></div>\n                  {{joueur.nom}} - {{joueur.classement}} points\n                </div>\n              </div>\n\n              <p *ngIf=\"binome.joueurs.length === 1\" class=\"center error_message\">Binôme inqualifiable car incomplet</p>\n            </mat-card>\n          </div>\n        </div>\n      </div>\n\n      <div fxFlex=\"33%\" fxLayoutAlign=\"center stretch\" id=\"listPlayers\" class=\"absolutePos\">\n        <div class=\"listPlayers\">\n          <mat-card>\n            <h1 class=\"lobster center labelJoueursInscrits\">Joueurs inscrits</h1>\n            <h2 class=\"lobster center\">({{ nbPlayers() }} assigné<span *ngIf=\"nbPlayers() > 1\">s</span>) - ({{ subscribedUnassignedPlayers.length }} disponible<span *ngIf=\"subscribedUnassignedPlayers.length > 1\">s</span>)</h2>\n\n            <div cdkDropList cdkDropListSortingDisabled [cdkDropListData]=\"subscribedUnassignedPlayers\" class=\"list\" (cdkDropListDropped)=\"editBinome($event, null)\">\n              <div class=\"box center\" [cdkDragDisabled]=\"tableau.is_launched !== 0\" [cdkDragData]=\"[joueur._id, null]\" *ngFor=\"let joueur of subscribedUnassignedPlayers\" cdkDrag>\n                <div class=\"custom-placeholder\" *cdkDragPlaceholder></div>\n                {{joueur.nom}} - {{joueur.classement}} points\n              </div>\n            </div>\n          </mat-card>\n        </div>\n      </div>\n\n      <div fxFlex=\"33%\" fxLayoutAlign=\"center stretch\">\n        <div class=\"listBinomes\">\n          <div *ngFor=\"let binome of binomes; let indexList = index; let isOdd = odd;\">\n            <mat-card [class]=\"'mat-elevation-z8 ' + (binome.locked ? 'locked' : '')\" *ngIf=\"isOdd\">\n              <h3 class=\"lobster center\">Binôme n°{{indexList+1}}</h3>\n\n              <div cdkDropList [cdkDropListData]=\"binomes[indexList].joueurs\" cdkDropListSortingDisabled class=\"list\" (cdkDropListDropped)=\"editBinome($event, binome._id)\">\n                <div [cdkDragData]=\"[joueur._id, binome._id]\" [cdkDragDisabled]=\"binome.locked || tableau.is_launched !== 0\" class=\"box center\" *ngFor=\"let joueur of binomes[indexList].joueurs\" cdkDrag (dblclick)=\"unsubscribeDblClick(binome._id, joueur._id)\">\n                  <div class=\"custom-placeholder\" *cdkDragPlaceholder></div>\n                  {{joueur.nom}} - {{joueur.classement}} points\n                </div>\n              </div>\n\n              <p *ngIf=\"binome.joueurs.length === 1\" class=\"center error_message\">Binôme inqualifiable car unique joueur</p>\n            </mat-card>\n          </div>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</div>\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { JoueurInterface } from '../../Interface/Joueur';\nimport { TableauInterface } from '../../Interface/Tableau';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { TableauService } from '../../Service/tableau.service';\nimport { NotifyService } from '../../Service/notify.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport {\n  CdkDragDrop,\n  moveItemInArray,\n  transferArrayItem,\n} from '@angular/cdk/drag-drop';\nimport { BinomeInterface } from '../../Interface/Binome';\nimport { BinomeService } from '../../Service/binome.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-binome',\n  templateUrl: './binome.component.html',\n  styleUrls: ['./binome.component.scss'],\n})\nexport class BinomeComponent implements OnInit, OnDestroy {\n  @Input() binomes: BinomeInterface[] = [];\n  @Input() subscribedUnassignedPlayers: JoueurInterface[] = [];\n  tableau: TableauInterface = {\n    format: null,\n    _id: null,\n    poules: null,\n    nom: null,\n    is_launched: null,\n    consolante: null,\n    maxNumberPlayers: null,\n    age_minimum: null,\n    nbPoules: null,\n    handicap: null,\n  };\n  private tableauxEditionSubscription: Subscription;\n  @Output() generatePoules: EventEmitter<any> = new EventEmitter();\n  @Output() getAllBinomes: EventEmitter<any> = new EventEmitter();\n  @Output() getSubscribedUnassignedPlayers: EventEmitter<any> =\n    new EventEmitter();\n\n  onScrollEvent(): void {\n    const element = document.getElementById('listPlayers');\n    if (element) {\n      if (window.scrollY >= 173) {\n        element.classList.remove('absolutePos');\n        element.classList.add('stickyPos');\n      } else {\n        element.classList.add('absolutePos');\n        element.classList.remove('stickyPos');\n      }\n    }\n  }\n\n  constructor(\n    private binomeService: BinomeService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private snackBar: MatSnackBar,\n    private notifyService: NotifyService,\n    private gestionService: TableauService\n  ) {}\n\n  ngOnInit(): void {\n    this.route.paramMap.subscribe(() => {\n      this.getTableau();\n\n      this.tableauxEditionSubscription =\n        this.gestionService.tableauxEditSource.subscribe(\n          (tableau: TableauInterface) => {\n            this.tableau = tableau;\n          }\n        );\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.tableauxEditionSubscription.unsubscribe();\n  }\n\n  getTableau(): void {\n    this.gestionService\n      .getTableau(this.router.url.split('/').pop())\n      .subscribe((tableau) => {\n        this.tableau = tableau;\n        this.getAllBinomes.emit();\n        if (this.tableau.format === 'double') {\n          this.getSubscribedUnassignedPlayers.emit();\n        }\n      });\n  }\n\n  editBinome(\n    event: CdkDragDrop<[id: JoueurInterface], any>,\n    id_binome: string\n  ): void {\n    if (event.previousContainer === event.container) {\n      // Le joueur n'a pas changé de binôme\n      moveItemInArray(\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex\n      );\n    } else {\n      if (\n        event.container.data.length < this.tableau.maxNumberPlayers ||\n        id_binome === null /* Si un joueur est sorti d'un binôme */\n      ) {\n        transferArrayItem(\n          event.previousContainer.data,\n          event.container.data,\n          event.previousIndex,\n          event.currentIndex\n        );\n        this.binomeService\n          .editBinome(\n            event.item.data[1],\n            id_binome,\n            event.container.data,\n            event.item.data[0]\n          )\n          .subscribe(\n            () => {\n              if (this.tableau.poules && this.tableau.is_launched === 0) {\n                this.generatePoules.emit();\n              }\n            },\n            (err) => {\n              this.notifyService.notifyUser(\n                err.error,\n                this.snackBar,\n                'error',\n                'OK'\n              );\n            }\n          );\n      } else {\n        this.notifyService.notifyUser(\n          'Le binôme est complet',\n          this.snackBar,\n          'error',\n          'OK'\n        );\n      }\n    }\n  }\n\n  unsubscribeDblClick(idBinome, idPlayer): void {\n    this.binomeService.removePlayer(idBinome, idPlayer).subscribe(\n      () => {\n        this.getAllBinomes.emit();\n        if (this.tableau.poules && this.tableau.is_launched === 0) {\n          this.generatePoules.emit();\n        }\n        this.getSubscribedUnassignedPlayers.emit();\n      },\n      (err) => {\n        this.notifyService.notifyUser(err.error, this.snackBar, 'error', 'OK');\n      }\n    );\n  }\n\n  nbPlayers(): number {\n    return this.binomes.length > 0\n      ? this.binomes\n          .map((binome) => binome.joueurs.length)\n          .reduce((a, b) => a + b)\n      : 0;\n  }\n}\n","<h2 class=\"lobster center\">Handicap</h2>\n\n<div class=\"center\" *ngIf=\"listeJoueurs\">\n  <p *ngFor=\"let match of showHandicap()\" [outerHTML]=\"match\"></p>\n</div>\n\n<div mat-dialog-actions class=\"center\">\n  <button mat-button (click)=\"close()\" color=\"primary\">OK</button>\n</div>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { JoueurInterface } from 'src/app/Interface/Joueur';\nimport { HandicapService } from 'src/app/Service/handicap.service';\n\n@Component({\n  selector: 'app-handicap',\n  templateUrl: './handicap.component.html',\n  styleUrls: ['./handicap.component.scss'],\n})\nexport class HandicapComponent implements OnInit {\n  public listeJoueurs: JoueurInterface[] = null;\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data,\n    public dialogRef: MatDialogRef<HandicapComponent>,\n    private readonly handicapService: HandicapService\n  ) {\n    this.listeJoueurs = data.listeJoueurs;\n  }\n\n  ngOnInit(): void {}\n\n  showHandicap(): string[] {\n    const matchesPoules = [];\n    this.listeJoueurs.forEach((joueur1) => {\n      this.listeJoueurs.forEach((joueur2) => {\n        if (\n          joueur1._id !== joueur2._id &&\n          matchesPoules.filter((match) => {\n            const regex = new RegExp(\n              '.*' + joueur2.nom + '.*' + joueur1.nom + '.*'\n            );\n            return match.match(regex);\n          }).length === 0\n        ) {\n          matchesPoules.push(\n            joueur1.nom +\n              ' ' +\n              joueur1.classement +\n              ' pts <b>' +\n              this.handicapService.calculHandicap(\n                JSON.parse(JSON.stringify(joueur1.classement)),\n                JSON.parse(JSON.stringify(joueur2.classement))\n              )[0] +\n              '</b> vs <b>' +\n              this.handicapService.calculHandicap(\n                JSON.parse(JSON.stringify(joueur1.classement)),\n                JSON.parse(JSON.stringify(joueur2.classement))\n              )[1] +\n              '</b> ' +\n              ' ' +\n              joueur2.classement +\n              ' pts ' +\n              joueur2.nom +\n              '<br>'\n          );\n        }\n      });\n    });\n    return matchesPoules;\n  }\n\n  close(): void {\n    this.dialogRef.close();\n  }\n}\n","<div class=\"container\">\n\n  <mat-card *ngIf=\"!poules.length\">\n    <h2 class=\"center lobster\">Il n'y a pas de joueurs inscrits pour le moment</h2>\n  </mat-card>\n\n  <div fxLayout=\"row wrap\">\n    <div [fxFlex]=\"tableau.nbPoules > 2 ? '33%' : '50%'\" *ngFor=\"let poule of poules; let indexList = index\">\n      <mat-card class=\"mat-elevation-z8\">\n\n        <div [style]=\"tableau.handicap ? 'display: flex; justify-content: space-between;' : ''\">\n          <p></p>\n          <h2 class=\"lobster center\">\n            <mat-icon *ngIf=\"poule.locked\" class=\"locked\">check_circle</mat-icon>\n            Poule n°{{indexList+1}}\n          </h2>\n          <button title=\"Fiche des handicaps\" class=\"btn-handicap\" color=\"primary\" *ngIf=\"tableau.handicap && poules[indexList].participants.length > 1\" (click)=\"openMatchesHandicap(poules[indexList].participants)\" mat-icon-button>\n            <mat-icon>format_list_numbered</mat-icon>\n          </button>\n        </div>\n\n        <div\n          cdkDropList\n          [cdkDropListData]=\"poules[indexList].participants\"\n          class=\"list\"\n          (cdkDropListDropped)=\"editPoule($event, poule._id)\">\n          <div [cdkDragData]=\"[poule._id, participant._id]\" [cdkDragDisabled]=\"poule.locked\" class=\"box center\" [ngClass]=\"{ 'tight': (poules[indexList].objectRef === 'Binomes') }\" *ngFor=\"let participant of poules[indexList].participants\" cdkDrag>\n            <span [outerHTML]=\"showParticipant(poules[indexList].objectRef, participant)\"></span>\n          </div>\n        </div>\n        <button [disabled]=\"tableau.is_launched === 2\" (click)=\"setStatus(poule)\" mat-raised-button class=\"center btnSetLockedPoule\" color=\"primary\">{{(poule.locked ? 'Modifier' : 'Valider')}}</button>\n\n      </mat-card>\n    </div>\n  </div>\n</div>\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  OnDestroy,\n} from '@angular/core';\nimport { PoulesService } from '../../Service/poules.service';\nimport { JoueurInterface } from '../../Interface/Joueur';\nimport { PouleInterface } from '../../Interface/Poule';\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { TableauInterface } from '../../Interface/Tableau';\nimport { TableauService } from '../../Service/tableau.service';\nimport { NotifyService } from '../../Service/notify.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Subscription } from 'rxjs';\nimport { MatDialog } from '@angular/material/dialog';\nimport { HandicapComponent } from './handicap/handicap.component';\n\n@Component({\n  selector: 'app-poule',\n  templateUrl: './poule.component.html',\n  styleUrls: ['./poule.component.scss'],\n})\nexport class PouleComponent implements OnInit, OnDestroy {\n  @Input() poules: PouleInterface[] = [];\n  tableau: TableauInterface = {\n    format: null,\n    _id: null,\n    poules: null,\n    nom: null,\n    is_launched: null,\n    consolante: null,\n    maxNumberPlayers: null,\n    age_minimum: null,\n    nbPoules: null,\n    handicap: null,\n  };\n  @Output() getAllPoules: EventEmitter<any> = new EventEmitter();\n  private tableauxEditionSubscription: Subscription;\n\n  constructor(\n    private pouleService: PoulesService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private snackBar: MatSnackBar,\n    private gestionService: TableauService,\n    private notifyService: NotifyService,\n    public dialog: MatDialog\n  ) {}\n\n  ngOnInit(): void {\n    this.route.paramMap.subscribe(() => {\n      this.getTableau();\n\n      this.tableauxEditionSubscription =\n        this.gestionService.tableauxEditSource.subscribe(\n          (tableau: TableauInterface) => {\n            this.tableau = tableau;\n\n            // On change le visuel des toutes les poules si le tableau est terminé\n            if (this.tableau.is_launched === 2) {\n              this.poules = this.poules.map((poule) => {\n                poule.locked = true;\n                return poule;\n              });\n            }\n          }\n        );\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.tableauxEditionSubscription.unsubscribe();\n  }\n\n  getTableau(): void {\n    this.gestionService\n      .getTableau(this.router.url.split('/').pop())\n      .subscribe((tableau) => {\n        this.tableau = tableau;\n        this.getAllPoules.emit();\n      });\n  }\n\n  editPoule(\n    event: CdkDragDrop<[id: JoueurInterface], any>,\n    id_poule: string\n  ): void {\n    moveItemInArray(\n      event.container.data,\n      event.previousIndex,\n      event.currentIndex\n    );\n    this.pouleService.editPoule(id_poule, event.container.data).subscribe(\n      () => {},\n      (err) => {\n        this.notifyService.notifyUser(err.error, this.snackBar, 'error', 'OK');\n      }\n    );\n  }\n\n  setStatus(poule: PouleInterface): void {\n    this.pouleService.setStatus(poule).subscribe(\n      () => this.getAllPoules.emit(),\n      (err) => {\n        this.notifyService.notifyUser(err.error, this.snackBar, 'error', 'OK');\n      }\n    );\n  }\n\n  showParticipant(objectRef: string, participant_s): string {\n    if (objectRef === 'Joueurs') {\n      return participant_s.nom + ' - ' + participant_s.classement + ' points';\n    } else if (objectRef === 'Binomes') {\n      return participant_s.joueurs\n        .map((participant, index) => {\n          return (index > 0 ? '<br>' : '') + participant.nom;\n        })\n        .join('');\n    }\n  }\n\n  openMatchesHandicap(listeJoueurs: JoueurInterface[]): void {\n    this.dialog.open(HandicapComponent, {\n      width: '50%',\n      data: {\n        listeJoueurs,\n      },\n    });\n  }\n}\n","<h1 class=\"lobster center\"><span>{{tableau.nom | titlecase}} <span *ngIf=\"tableau.age_minimum !== null\">-{{ tableau.age_minimum}} ans</span></span></h1>\n\n<div id=\"actionButtons\">\n  <button mat-raised-button id=\"launchTableau\" *ngIf=\"tableau.is_launched === 0\" (click)=\"changeStateTableau()\">Lancer les {{ tableau.poules ? 'poules' : 'phases finales' }}</button>\n  <button mat-raised-button id=\"finishTableau\" *ngIf=\"tableau.is_launched === 1\" (click)=\"changeStateTableau()\">Terminer le tableau</button>\n</div>\n\n<mat-tab-group mat-align-tabs=\"center\" color=\"accent\" dynamicHeight=\"200%\" selectedIndex=\"0\" *ngIf=\"tableau._id\">\n\n  <mat-tab>\n    <ng-template mat-tab-label class=\"mat-tab-label\">Participants</ng-template>\n    <app-list-players\n      (generatePoules)=\"generatePoules()\"\n      (getAllBinomes)=\"getAllBinomes()\"\n      (getSubscribedUnassignedPlayers)=\"getSubscribedUnassignedPlayers()\">\n    </app-list-players>\n  </mat-tab>\n\n  <mat-tab *ngIf=\"tableau.format === 'double'\">\n    <ng-template mat-tab-label class=\"mat-tab-label\">Binômes</ng-template>\n    <app-binome (getSubscribedUnassignedPlayers)=\"getSubscribedUnassignedPlayers()\"\n                (getAllBinomes)=\"getAllBinomes()\"\n                (generatePoules)=\"generatePoules()\"\n                [binomes]=\"binomes\"\n                [subscribedUnassignedPlayers]=\"subscribedUnassignedPlayers\">\n    </app-binome>\n  </mat-tab>\n\n  <mat-tab *ngIf=\"tableau.poules\">\n    <ng-template mat-tab-label class=\"mat-tab-label\">Poules</ng-template>\n    <app-poule (getAllPoules)=\"getAllPoules()\" [poules]=\"poules\"></app-poule>\n  </mat-tab>\n\n  <mat-tab>\n    <ng-template mat-tab-label class=\"mat-tab-label\">\n      Phases finales\n    </ng-template>\n\n    <app-bracket [phase]=\"'finale'\" [tableau]=\"tableau\"></app-bracket>\n  </mat-tab>\n\n  <mat-tab *ngIf=\"tableau.consolante\">\n    <ng-template mat-tab-label class=\"mat-tab-label\">\n      Consolante\n    </ng-template>\n\n    <app-bracket [phase]=\"'consolante'\" [tableau]=\"tableau\"></app-bracket>\n  </mat-tab>\n</mat-tab-group>\n","import { Component, OnInit } from '@angular/core';\r\nimport { TableauService } from '../../Service/tableau.service';\r\nimport { TableauInterface } from '../../Interface/Tableau';\r\nimport { ActivatedRoute, Params, Router } from '@angular/router';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { NotifyService } from '../../Service/notify.service';\r\nimport { PoulesService } from '../../Service/poules.service';\r\nimport { PouleInterface } from '../../Interface/Poule';\r\nimport { BinomeService } from '../../Service/binome.service';\r\nimport { BinomeInterface } from '../../Interface/Binome';\r\nimport { JoueurService } from '../../Service/joueur.service';\r\nimport { JoueurInterface } from '../../Interface/Joueur';\r\nimport { Dialog } from '../../Interface/Dialog';\r\nimport { DialogComponent } from '../../SharedModule/dialog/dialog.component';\r\nimport { MatDialog } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-tableau',\r\n  templateUrl: './tableau.component.html',\r\n  styleUrls: ['./tableau.component.scss'],\r\n})\r\nexport class TableauComponent implements OnInit {\r\n  tableau: TableauInterface = {\r\n    _id: null,\r\n    format: null,\r\n    nom: null,\r\n    poules: null,\r\n    is_launched: null,\r\n    consolante: null,\r\n    maxNumberPlayers: null,\r\n    age_minimum: null,\r\n    nbPoules: null,\r\n    handicap: null,\r\n  };\r\n\r\n  // Input variables\r\n  poules: PouleInterface[] = [];\r\n  binomes: BinomeInterface[] = [];\r\n  subscribedUnassignedPlayers: JoueurInterface[] = [];\r\n\r\n  constructor(\r\n    private tableauService: TableauService,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private snackBar: MatSnackBar,\r\n    private notifyService: NotifyService,\r\n    private pouleService: PoulesService,\r\n    private binomeService: BinomeService,\r\n    private joueurService: JoueurService,\r\n    public dialog: MatDialog\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.route.params.subscribe((params: Params) => {\r\n      this.getTableau(params.tableau);\r\n    });\r\n  }\r\n\r\n  getTableau(idTableau: string): void {\r\n    this.tableauService.getTableau(idTableau).subscribe(\r\n      (tableau) => (this.tableau = tableau),\r\n      (err) => {\r\n        this.notifyService.notifyUser(err.error, this.snackBar, 'error', 'OK');\r\n        this.router.navigate(['/error-page']);\r\n      }\r\n    );\r\n  }\r\n\r\n  changeStateTableau(): void {\r\n    const stateToChange: Dialog = {\r\n      id: 'true',\r\n      action:\r\n        this.tableau.is_launched === 1\r\n          ? 'Terminer le tableau ?'\r\n          : 'Lancer les ' +\r\n            (this.tableau.poules ? 'poules' : 'phases finales') +\r\n            ' ?',\r\n      option:\r\n        this.tableau.is_launched === 0\r\n          ? \"Aucun joueur ne pourra plus s'inscrire ni se désinscrire au tableau\" +\r\n            (this.tableau.format === 'double'\r\n              ? ' et les binômes seront bloqués'\r\n              : '')\r\n          : 'Les ' +\r\n            (this.tableau.poules ? 'poules' : 'binômes') +\r\n            ' et phases finales seront validé' +\r\n            (this.tableau.poules ? 'e' : '') +\r\n            's et bloqué' +\r\n            (this.tableau.poules ? 'e' : '') +\r\n            's',\r\n      action_button_text:\r\n        this.tableau.is_launched === 1 ? 'Terminer' : 'Lancer',\r\n    };\r\n\r\n    this.dialog\r\n      .open(DialogComponent, {\r\n        width: '55%',\r\n        data: stateToChange,\r\n      })\r\n      .afterClosed()\r\n      .subscribe((response) => {\r\n        if (response) {\r\n          this.tableau.is_launched++;\r\n          this.tableauService.tableauxEditSource.next(this.tableau);\r\n          this.tableauService.changeLaunchState(this.tableau).subscribe(\r\n            () => {\r\n              if (this.tableau.poules && this.tableau.is_launched === 2) {\r\n                this.pouleService\r\n                  .validateAllPoules(this.tableau._id)\r\n                  .subscribe();\r\n              }\r\n            },\r\n            (err) => {\r\n              this.notifyService.notifyUser(\r\n                err.error,\r\n                this.snackBar,\r\n                'error',\r\n                'OK'\r\n              );\r\n            }\r\n          );\r\n        }\r\n      });\r\n  }\r\n\r\n  // Output functions\r\n  getAllPoules(): void {\r\n    this.pouleService.getAll(this.tableau._id, this.tableau.format).subscribe(\r\n      (poules) => (this.poules = poules),\r\n      (err) => {\r\n        this.notifyService.notifyUser(err.error, this.snackBar, 'error', 'OK');\r\n      }\r\n    );\r\n  }\r\n\r\n  generatePoules(): void {\r\n    this.pouleService.generatePoules(this.tableau).subscribe(\r\n      () => this.getAllPoules(),\r\n      (err) => {\r\n        this.notifyService.notifyUser(err.error, this.snackBar, 'error', 'OK');\r\n      }\r\n    );\r\n  }\r\n\r\n  getAllBinomes(): void {\r\n    this.binomeService.getAll(this.tableau._id).subscribe(\r\n      (binomes) => (this.binomes = binomes),\r\n      (err) => {\r\n        this.notifyService.notifyUser(err.error, this.snackBar, 'error', 'OK');\r\n      }\r\n    );\r\n  }\r\n\r\n  getSubscribedUnassignedPlayers(): void {\r\n    this.joueurService\r\n      .getSubscribedUnassignedDouble(this.tableau._id)\r\n      .subscribe(\r\n        (joueurs) => (this.subscribedUnassignedPlayers = joueurs),\r\n        (err) =>\r\n          this.notifyService.notifyUser(err.error, this.snackBar, 'error', 'OK')\r\n      );\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { TableauComponent } from './tableau/tableau.component';\r\nimport { AuthGuardService } from '../auth-guard.service';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'tableau/:tableau',\r\n    component: TableauComponent,\r\n    canActivate: [AuthGuardService],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class TournamentRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { MatchComponent } from './match/match.component';\r\nimport { TableauComponent } from './tableau/tableau.component';\r\nimport { ListPlayersComponent } from './list-players/list-players.component';\r\nimport { PouleComponent } from './poule/poule.component';\r\nimport { BracketComponent } from './bracket/bracket.component';\r\nimport { BinomeComponent } from './binome/binome.component';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { NgTournamentTreeModule } from 'ng-tournament-tree';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { TournamentRoutingModule } from './tournament-routing.module';\r\nimport { SharedModules } from '../SharedModule/shared.modules';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { HandicapComponent } from './poule/handicap/handicap.component';\r\nimport { MatSortModule } from '@angular/material/sort';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MatchComponent,\r\n    TableauComponent,\r\n    ListPlayersComponent,\r\n    PouleComponent,\r\n    BracketComponent,\r\n    BinomeComponent,\r\n    HandicapComponent,\r\n  ],\r\n  imports: [\r\n    RouterModule,\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FlexLayoutModule,\r\n    MatCardModule,\r\n    DragDropModule,\r\n    MatIconModule,\r\n    MatProgressSpinnerModule,\r\n    NgTournamentTreeModule,\r\n    NgTournamentTreeModule,\r\n    BrowserAnimationsModule,\r\n    MatButtonModule,\r\n    MatInputModule,\r\n    MatAutocompleteModule,\r\n    MatSelectModule,\r\n    MatTableModule,\r\n    MatChipsModule,\r\n    MatTabsModule,\r\n    FormsModule,\r\n    TournamentRoutingModule,\r\n    SharedModules,\r\n    MatSortModule,\r\n  ],\r\n})\r\nexport class TournamentModules {}\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-error-page',\n  templateUrl: './error-page.component.html',\n  styleUrls: ['./error-page.component.scss']\n})\nexport class ErrorPageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div>\n  <mat-icon class=\"center\">sentiment_dissatisfied</mat-icon>\n  <h1 class=\"lobster center\">Ce que vous recherchez n'existe pas ...</h1>\n</div>\n","import { RouterModule } from '@angular/router';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { ErrorPageComponent } from './error-page/error-page.component';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@NgModule({\r\n  declarations: [ErrorPageComponent],\r\n  imports: [\r\n    RouterModule.forChild([\r\n      { path: '**', component: ErrorPageComponent },\r\n      { path: 'error-page', component: ErrorPageComponent },\r\n    ]),\r\n    MatIconModule,\r\n  ],\r\n  exports: [RouterModule],\r\n})\r\nexport class WildcardModules {}\r\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AccountService } from './account.service';\nimport { environment } from '../../environments/environment';\nimport { catchError, map } from 'rxjs/operators';\n\n@Injectable()\nexport class AuthInterceptorInterceptor implements HttpInterceptor {\n  constructor(private authService: AccountService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    request = request.clone({\n      setHeaders: {\n        Authorization: this.authService.getToken()\n          ? this.authService.getToken()\n          : environment.anonymousHeader,\n      },\n    });\n    return next.handle(request).pipe(\n      catchError((err) => {\n        if (err.status && err.status === 401) {\n          err.error = 'Votre session est terminée';\n          this.authService.logout();\n        }\n        throw err;\n      }),\n      map((res: any) => res)\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { AuthGuardService } from './auth-guard.service';\r\nimport { AuthInterceptorInterceptor } from './Service/auth-interceptor.interceptor';\r\nimport { UnauthGuardService } from './unauth-guard.service';\r\n\r\n@NgModule({\r\n  providers: [\r\n    AuthGuardService,\r\n    UnauthGuardService,\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: AuthInterceptorInterceptor,\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class CoreModules {}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { TournamentModules } from './TournamentModule/tournament.modules';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { CommonModule } from '@angular/common';\r\nimport { WildcardModules } from './wildcard.modules';\r\nimport { CoreModules } from './core.modules';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FormulaireModules } from './FormulaireModule/formulaire.modules';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  imports: [\r\n    CommonModule,\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatToolbarModule,\r\n    MatSnackBarModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    TournamentModules,\r\n    FormulaireModules,\r\n    WildcardModules,\r\n    CoreModules,\r\n  ],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}